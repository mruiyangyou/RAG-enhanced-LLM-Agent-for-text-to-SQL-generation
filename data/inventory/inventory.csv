question,query,masked,true_ans
Write a SQL statement that displays all the information about all salespeople.,SELECT * FROM salesman;,Write a SQL statement that [MASK] all the information about all [MASK],"[(5001, 'James Hoog', 'New York', 0.15), (5002, 'Nail Knite', 'Paris', 0.13), (5005, 'Pit Alex', 'London', 0.11), (5006, 'Mc Lyon', 'Paris', 0.14), (5007, 'Paul Adam', 'Rome', 0.13), (5003, 'Lauson Hen', 'San Jose', 0.12), (5008, 'Joseph Ferguson', 'California', 0.11), (5009, 'Cindy Roman', 'Paris', 0.13), (5010, 'James Conway', 'Moscow', 0.11), (5011, 'John Lutz', 'Rome', 0.12), (5012, 'Nicole Hardy', 'Rome', 0.1), (5013, 'Nichole Rasmussen', 'Paris', 0.12), (5014, 'Jesse Wilson DDS', 'London', 0.13), (5015, 'Debra Grant', 'Rome', 0.12), (5016, 'Michael Green', 'Berlin', 0.12), (5017, 'Adrienne Moore', 'Rome', 0.11), (5018, 'Tommy Moore', 'Berlin', 0.13), (5019, 'Miss Alexandra Hess', 'Moscow', 0.13), (5020, 'Drew Skinner', 'New York', 0.15), (5021, 'Edward Lopez', 'Rome', 0.11), (5022, 'Benjamin Cooley', 'Rome', 0.11), (5023, 'William Nixon', 'Paris', 0.1), (5024, 'Brandon Warner', 'California', 0.14), (5025, 'Timothy Ryan', 'London', 0.12), (5026, 'Matthew Schultz', 'New York', 0.14), (5027, 'Angela Hampton', 'Rome', 0.13), (5028, 'Kelly Moore', 'Moscow', 0.13), (5029, 'Christine Wood DDS', 'California', 0.15), (5030, 'Tonya Whitaker', 'Moscow', 0.11), (5031, 'Rachel Diaz', 'Berlin', 0.1), (5032, 'Sean Torres', 'Berlin', 0.11), (5033, 'Jack Waters', 'Paris', 0.15), (5034, 'Kelly Abbott', 'Berlin', 0.14), (5035, 'Jennifer Hernandez', 'London', 0.13), (5036, 'Hailey Ramirez', 'London', 0.13), (5037, 'Elizabeth Estes', 'Moscow', 0.11), (5038, 'Patrick Delgado', 'San Jose', 0.11), (5039, 'Michelle Williams', 'San Jose', 0.11), (5040, 'Katherine Burch', 'Berlin', 0.11), (5041, 'Justin Carter', 'New York', 0.15), (5042, 'Jonathan Warren MD', 'California', 0.11), (5043, 'Jonathan Hansen', 'Berlin', 0.12), (5044, 'Timothy Hunter', 'Rome', 0.12), (5045, 'Julie Maxwell', 'Rome', 0.13), (5046, 'Glenn Daugherty', 'California', 0.11), (5047, 'Kimberly Smith', 'London', 0.11), (5048, 'Matthew Walter', 'London', 0.13), (5049, 'Warren Lee', 'California', 0.1), (5050, 'Carrie Hall', 'Berlin', 0.12), (5051, 'Wayne Jenkins', 'Berlin', 0.12), (5052, 'Jeremy Stevens', 'San Jose', 0.14), (5053, 'Krista Murphy', 'Moscow', 0.15), (5054, 'Christina Garza', 'California', 0.13), (5055, 'Brian White', 'Rome', 0.13), (5056, 'Corey Jefferson', 'Berlin', 0.12), (5057, 'Allen Fitzgerald', 'Moscow', 0.1)]"
Write a SQL statement to display specific columns such as names and commissions for all salespeople.,"SELECT name, commission FROM salesman;",Write a SQL statement to [MASK] specific columns such as [MASK] and [MASK] for all [MASK],"[('James Hoog', 0.15), ('Nail Knite', 0.13), ('Pit Alex', 0.11), ('Mc Lyon', 0.14), ('Paul Adam', 0.13), ('Lauson Hen', 0.12), ('Joseph Ferguson', 0.11), ('Cindy Roman', 0.13), ('James Conway', 0.11), ('John Lutz', 0.12), ('Nicole Hardy', 0.1), ('Nichole Rasmussen', 0.12), ('Jesse Wilson DDS', 0.13), ('Debra Grant', 0.12), ('Michael Green', 0.12), ('Adrienne Moore', 0.11), ('Tommy Moore', 0.13), ('Miss Alexandra Hess', 0.13), ('Drew Skinner', 0.15), ('Edward Lopez', 0.11), ('Benjamin Cooley', 0.11), ('William Nixon', 0.1), ('Brandon Warner', 0.14), ('Timothy Ryan', 0.12), ('Matthew Schultz', 0.14), ('Angela Hampton', 0.13), ('Kelly Moore', 0.13), ('Christine Wood DDS', 0.15), ('Tonya Whitaker', 0.11), ('Rachel Diaz', 0.1), ('Sean Torres', 0.11), ('Jack Waters', 0.15), ('Kelly Abbott', 0.14), ('Jennifer Hernandez', 0.13), ('Hailey Ramirez', 0.13), ('Elizabeth Estes', 0.11), ('Patrick Delgado', 0.11), ('Michelle Williams', 0.11), ('Katherine Burch', 0.11), ('Justin Carter', 0.15), ('Jonathan Warren MD', 0.11), ('Jonathan Hansen', 0.12), ('Timothy Hunter', 0.12), ('Julie Maxwell', 0.13), ('Glenn Daugherty', 0.11), ('Kimberly Smith', 0.11), ('Matthew Walter', 0.13), ('Warren Lee', 0.1), ('Carrie Hall', 0.12), ('Wayne Jenkins', 0.12), ('Jeremy Stevens', 0.14), ('Krista Murphy', 0.15), ('Christina Garza', 0.13), ('Brian White', 0.13), ('Corey Jefferson', 0.12), ('Allen Fitzgerald', 0.1)]"
"From the following table, write a SQL query to locate salespeople who live in the city of 'Paris'. Return salesperson's name, city.","SELECT name, city FROM salesman WHERE city = 'Paris';","From the following table, write a SQL query to locate [MASK] who live in the [MASK] of 'Paris'. Return [MASK] [MASK] [MASK]","[('Nail Knite', 'Paris'), ('Mc Lyon', 'Paris'), ('Cindy Roman', 'Paris'), ('Nichole Rasmussen', 'Paris'), ('William Nixon', 'Paris'), ('Jack Waters', 'Paris')]"
"From the following table, write a SQL query to find orders that are delivered by a salesperson with ID. 5001. Return ord_no, ord_date, purch_amt.","SELECT ord_no, ord_date, purch_amt FROM orders WHERE salesman_id = 5001;","From the following table, write a SQL query to find [MASK] that are delivered by a [MASK] with ID. 5001. Return ord_no, [MASK] [MASK]","[(70002, '2012-10-05', 65.26), (70005, '2012-07-27', 2400.6), (70008, '2012-09-10', 5760), (70013, '2012-04-25', 3045.6), (70062, '2013-07-27', 3753.3)]"
"From the following table, write a SQL query to locate the details of customers with grade values above 100. Return customer_id, cust_name, city, grade, and salesman_id.",SELECT * FROM customer WHERE grade > 100;,"From the following table, write a SQL query to locate the details of [MASK] with [MASK] values above 100. Return [MASK] [MASK] [MASK] [MASK] and [MASK]","[(3007, 'Brad Davis', 'New York', 200, 5001), (3005, 'Graham Zusi', 'California', 200, 5002), (3008, 'Julian Green', 'London', 300, 5002), (3004, 'Fabian Johnson', 'Paris', 300, 5006), (3003, 'Jozy Altidor', 'Moscow', 200, 5007), (3010, 'Amy Allen', 'New York', 200, 5010), (3011, 'Leslie Jensen', 'Paris', 106, 5018), (3012, 'Mary Jacobs', 'London', 200, 5052), (3013, 'Stephen Hurley', 'London', 194, 5041), (3015, 'William Dawson', 'Berlin', 200, 5046), (3016, 'Terry Perez', 'Moscow', 234, 5051), (3017, 'Gerald Walker', 'Berlin', 200, 5057), (3018, 'Angela Alvarez', 'New York', 200, 5012), (3021, 'Wayne White', 'California', 294, 5045), (3024, 'Ricky Carr', 'California', 200, 5045), (3025, 'Donald Wilson', 'California', 300, 5042), (3026, 'Devin Powers', 'San Jose', 187, 5019), (3027, 'Christy Quinn', 'Rome', 200, 5017), (3028, 'Dr. Tracy Pitts', 'London', 155, 5005), (3029, 'Kathleen Holmes', 'New York', 123, 5043), (3030, 'Frank Hines', 'San Jose', 236, 5005), (3031, 'Bryan Tanner', 'California', 134, 5012), (3035, 'Christopher Marsh', 'London', 216, 5026), (3037, 'Chris Thomas', 'Berlin', 200, 5049), (3038, 'Shelby Newman', 'San Jose', 178, 5009), (3039, 'Sandra Young', 'Paris', 200, 5035), (3042, 'Steven Williams', 'Berlin', 300, 5023), (3044, 'Brianna Schmidt', 'Rome', 200, 5020), (3047, 'Sandy Burgess', 'Moscow', 300, 5010), (3048, 'Steven Scott', 'California', 300, 5008), (3049, 'Cody Fields', 'Paris', 200, 5038), (3050, 'Tracey Smith', 'Moscow', 200, 5018), (3051, 'Stephanie Carroll', 'San Jose', 200, 5013), (3052, 'Dr. John Evans', 'London', 200, 5031), (3054, 'Holly Thompson', 'Paris', 200, 5026), (3055, 'Sierra Perry', 'London', 200, 5007), (3056, 'Julia Shaffer', 'London', 283, 5032), (3058, 'Larry Martin', 'Paris', 300, 5056), (3059, 'Hannah Garcia', 'New York', 157, 5021)]"
"From the following table, write a SQL query to find the details of those salespeople whose commissions range from 0.10 to0.12. Return salesman_id, name, city, and commission.","SELECT salesman_id, name, city, commission FROM salesman WHERE (commission > 0.10 AND commission < 0.12);","From the following table, write a SQL query to find the details of those [MASK] whose [MASK] range from 0.10 to0.12. Return [MASK] [MASK] [MASK] and [MASK]","[(5005, 'Pit Alex', 'London', 0.11), (5008, 'Joseph Ferguson', 'California', 0.11), (5010, 'James Conway', 'Moscow', 0.11), (5017, 'Adrienne Moore', 'Rome', 0.11), (5021, 'Edward Lopez', 'Rome', 0.11), (5022, 'Benjamin Cooley', 'Rome', 0.11), (5030, 'Tonya Whitaker', 'Moscow', 0.11), (5032, 'Sean Torres', 'Berlin', 0.11), (5037, 'Elizabeth Estes', 'Moscow', 0.11), (5038, 'Patrick Delgado', 'San Jose', 0.11), (5039, 'Michelle Williams', 'San Jose', 0.11), (5040, 'Katherine Burch', 'Berlin', 0.11), (5042, 'Jonathan Warren MD', 'California', 0.11), (5046, 'Glenn Daugherty', 'California', 0.11), (5047, 'Kimberly Smith', 'London', 0.11)]"
"From the following table, write a SQL query to find the details of those salespeople who come from the 'Paris' City or 'Rome' City. Return salesman_id, name, city, commission.",SELECT * FROM salesman WHERE city = 'Paris' OR city = 'Rome';,"From the following table, write a SQL query to find the details of those [MASK] who come from the 'Paris' [MASK] or 'Rome' [MASK] Return [MASK] [MASK] [MASK] [MASK]","[(5002, 'Nail Knite', 'Paris', 0.13), (5006, 'Mc Lyon', 'Paris', 0.14), (5007, 'Paul Adam', 'Rome', 0.13), (5009, 'Cindy Roman', 'Paris', 0.13), (5011, 'John Lutz', 'Rome', 0.12), (5012, 'Nicole Hardy', 'Rome', 0.1), (5013, 'Nichole Rasmussen', 'Paris', 0.12), (5015, 'Debra Grant', 'Rome', 0.12), (5017, 'Adrienne Moore', 'Rome', 0.11), (5021, 'Edward Lopez', 'Rome', 0.11), (5022, 'Benjamin Cooley', 'Rome', 0.11), (5023, 'William Nixon', 'Paris', 0.1), (5027, 'Angela Hampton', 'Rome', 0.13), (5033, 'Jack Waters', 'Paris', 0.15), (5044, 'Timothy Hunter', 'Rome', 0.12), (5045, 'Julie Maxwell', 'Rome', 0.13), (5055, 'Brian White', 'Rome', 0.13)]"
"From the following table, write a SQL query to select orders between 500 and 4000 (begin and end values are included). Exclude orders amount 948.50 and 1983.43. Return ord_no, purch_amt, ord_date, customer_id, and salesman_id.","SELECT * FROM orders WHERE (purch_amt BETWEEN 500 AND 4000) AND NOT purch_amt IN (948.50, 1983.43);","From the following table, write a SQL query to select [MASK] between 500 and 4000 (begin and end values are included). Exclude [MASK] amount 948.50 and 1983.43. Return ord_no, [MASK] [MASK] [MASK] and [MASK]","[(70005, 2400.6, '2012-07-27', 3007, 5001), (70003, 2480.4, '2012-10-10', 3009, 5003), (70013, 3045.6, '2012-04-25', 3002, 5001), (70014, 2608.23, '2012-02-23', 3033, 5015), (70016, 2051.01, '2012-12-25', 3037, 5033), (70018, 1812.19, '2012-09-09', 3009, 5003), (70019, 2741.1, '2012-10-27', 3055, 5035), (70020, 948.26, '2012-02-10', 3059, 5011), (70021, 3989.67, '2013-01-25', 3055, 5047), (70023, 1887.12, '2012-11-22', 3023, 5013), (70027, 1895.55, '2012-06-25', 3003, 5029), (70028, 2085.39, '2013-03-29', 3035, 5013), (70029, 1610.05, '2013-04-03', 3058, 5002), (70031, 1663.5, '2012-05-03', 3036, 5008), (70032, 569.21, '2013-08-27', 3005, 5045), (70033, 3761.73, '2013-08-21', 3004, 5025), (70034, 1160.2, '2013-07-29', 3037, 5036), (70036, 3212.12, '2012-07-09', 3049, 5057), (70037, 3824.93, '2012-12-01', 3020, 5030), (70038, 2771.11, '2012-08-12', 3008, 5015), (70039, 3991.63, '2012-10-05', 3026, 5005), (70041, 1173.26, '2012-08-12', 3050, 5008), (70042, 2434.26, '2013-04-07', 3009, 5010), (70043, 3716.87, '2012-11-01', 3037, 5009), (70044, 776.19, '2013-05-12', 3014, 5052), (70046, 612.7, '2013-06-09', 3040, 5040), (70047, 1629.92, '2012-01-07', 3046, 5032), (70049, 2608.07, '2013-05-30', 3005, 5033), (70051, 2213.66, '2013-04-26', 3054, 5030), (70052, 2984.3, '2013-03-10', 3055, 5029), (70053, 3257.51, '2013-05-29', 3057, 5052), (70054, 3633.23, '2012-07-13', 3043, 5046), (70055, 1204.16, '2013-08-08', 3045, 5054), (70056, 1107.02, '2012-03-21', 3030, 5019), (70058, 1731.25, '2013-09-22', 3003, 5042), (70059, 3144.45, '2012-08-22', 3004, 5022), (70060, 1023.23, '2013-04-15', 3042, 5026), (70062, 3753.3, '2013-07-27', 3046, 5001), (70063, 1313.05, '2013-02-23', 3019, 5010)]"
"From the following table, write a SQL query to retrieve the details of the salespeople whose names begin with any letter between 'A' and 'L' (not inclusive). Return salesman_id, name, city, commission.",SELECT * FROM salesman WHERE name BETWEEN 'A' AND 'L';,"From the following table, write a SQL query to retrieve the details of the [MASK] whose [MASK] begin with any letter between 'A' and 'L' (not inclusive). Return [MASK] [MASK] [MASK] [MASK]","[(5001, 'James Hoog', 'New York', 0.15), (5008, 'Joseph Ferguson', 'California', 0.11), (5009, 'Cindy Roman', 'Paris', 0.13), (5010, 'James Conway', 'Moscow', 0.11), (5011, 'John Lutz', 'Rome', 0.12), (5014, 'Jesse Wilson DDS', 'London', 0.13), (5015, 'Debra Grant', 'Rome', 0.12), (5017, 'Adrienne Moore', 'Rome', 0.11), (5020, 'Drew Skinner', 'New York', 0.15), (5021, 'Edward Lopez', 'Rome', 0.11), (5022, 'Benjamin Cooley', 'Rome', 0.11), (5024, 'Brandon Warner', 'California', 0.14), (5027, 'Angela Hampton', 'Rome', 0.13), (5028, 'Kelly Moore', 'Moscow', 0.13), (5029, 'Christine Wood DDS', 'California', 0.15), (5033, 'Jack Waters', 'Paris', 0.15), (5034, 'Kelly Abbott', 'Berlin', 0.14), (5035, 'Jennifer Hernandez', 'London', 0.13), (5036, 'Hailey Ramirez', 'London', 0.13), (5037, 'Elizabeth Estes', 'Moscow', 0.11), (5040, 'Katherine Burch', 'Berlin', 0.11), (5041, 'Justin Carter', 'New York', 0.15), (5042, 'Jonathan Warren MD', 'California', 0.11), (5043, 'Jonathan Hansen', 'Berlin', 0.12), (5045, 'Julie Maxwell', 'Rome', 0.13), (5046, 'Glenn Daugherty', 'California', 0.11), (5047, 'Kimberly Smith', 'London', 0.11), (5050, 'Carrie Hall', 'Berlin', 0.12), (5052, 'Jeremy Stevens', 'San Jose', 0.14), (5053, 'Krista Murphy', 'Moscow', 0.15), (5054, 'Christina Garza', 'California', 0.13), (5055, 'Brian White', 'Rome', 0.13), (5056, 'Corey Jefferson', 'Berlin', 0.12), (5057, 'Allen Fitzgerald', 'Moscow', 0.1)]"
"From the following table, write a SQL query to calculate total purchase amount of all orders. Return total purchase amount.",SELECT SUM(purch_amt) FROM orders;,"From the following table, write a SQL query to calculate total [MASK] amount of all [MASK] Return total [MASK] amount.","[(154290.5,)]"
"From the following table, write a SQL query to count the number of customers. Return number of customers.",SELECT COUNT(*) FROM customer;,"From the following table, write a SQL query to count the number of [MASK] Return number of [MASK]","[(58,)]"
"From the following table, write a SQL query to find the maximum purchase amount.",SELECT MAX(purch_amt) FROM orders;,"From the following table, write a SQL query to find the maximum [MASK] amount.","[(5760,)]"
"From the following table, write a SQL query to find the highest purchase amount ordered by each customer. Return customer ID, maximum purchase amount.","SELECT customer_id, MAX(purch_amt) FROM orders GROUP BY customer_id;","From the following table, write a SQL query to find the highest [MASK] amount [MASK] by each [MASK] Return [MASK] ID, maximum [MASK] amount.","[(3001, 270.65), (3002, 5760), (3003, 1895.55), (3004, 3761.73), (3005, 2608.07), (3007, 2400.6), (3008, 2771.11), (3009, 2480.4), (3011, 4379.4), (3012, 469.3), (3014, 776.19), (3015, 4502.37), (3018, 4713.3), (3019, 1313.05), (3020, 3824.93), (3023, 1887.12), (3026, 4205.52), (3030, 1107.02), (3033, 4532.41), (3035, 2085.39), (3036, 1663.5), (3037, 4824.13), (3040, 612.7), (3042, 4638), (3043, 3633.23), (3045, 1204.16), (3046, 3753.3), (3047, 4970.44), (3049, 3212.12), (3050, 1173.26), (3053, 4785.75), (3054, 2213.66), (3055, 3989.67), (3057, 4945.56), (3058, 1610.05), (3059, 4357.38)]"
"From the following table, write a SQL query to determine the highest purchase amount made by each salesperson on '2012-08-17'. Return salesperson ID, purchase amount","SELECT salesman_id, MAX(purch_amt) FROM orders WHERE ord_date = '2012-08-17' GROUP BY salesman_id;","From the following table, write a SQL query to determine the highest [MASK] amount made by each [MASK] on '2012-08-17'. Return [MASK] ID, [MASK] amount","[(5003, 110.5), (5007, 75.29)]"
"From the following table, write a SQL query that calculates the maximum purchase amount generated by each salesperson for each order date. Sort the result-set by salesperson id and order date in ascending order. Return salesperson id, order date and maximum purchase amount.","SELECT salesman_id, ord_date, MAX(purch_amt) FROM orders GROUP BY salesman_id, ord_date ORDER BY salesman_id, ord_date;","From the following table, write a SQL query that calculates the maximum [MASK] amount generated by each [MASK] for each [MASK] [MASK] Sort the result-set by [MASK] [MASK] and [MASK] [MASK] in ascending [MASK] Return [MASK] id, [MASK] [MASK] and maximum [MASK] amount.","[(5001, '2012-04-25', 3045.6), (5001, '2012-07-27', 2400.6), (5001, '2012-09-10', 5760), (5001, '2012-10-05', 65.26), (5001, '2013-07-27', 3753.3), (5002, '2012-06-27', 250.45), (5002, '2012-09-10', 948.5), (5002, '2012-10-05', 150.5), (5002, '2013-04-03', 1610.05), (5003, '2012-08-17', 110.5), (5003, '2012-09-09', 1812.19), (5003, '2012-10-10', 2480.4), (5005, '2012-09-10', 270.65), (5005, '2012-10-05', 3991.63), (5006, '2012-08-28', 4379.4), (5006, '2012-10-10', 1983.43), (5007, '2012-03-23', 4295.87), (5007, '2012-08-17', 75.29), (5008, '2012-05-03', 1663.5), (5008, '2012-08-12', 1173.26), (5009, '2012-11-01', 3716.87), (5010, '2013-02-23', 1313.05), (5010, '2013-04-07', 2434.26), (5011, '2012-02-10', 948.26), (5013, '2012-11-22', 1887.12), (5013, '2013-03-29', 2085.39), (5015, '2012-02-23', 2608.23), (5015, '2012-08-12', 2771.11), (5016, '2012-03-05', 4970.44), (5019, '2012-03-21', 1107.02), (5019, '2013-03-21', 4205.52), (5022, '2012-08-22', 3144.45), (5023, '2012-11-10', 469.3), (5025, '2013-08-21', 3761.73), (5026, '2012-05-21', 4824.13), (5026, '2013-04-15', 1023.23), (5027, '2012-11-08', 4638), (5029, '2012-06-25', 1895.55), (5029, '2013-03-10', 2984.3), (5030, '2012-12-01', 3824.93), (5030, '2013-04-26', 2213.66), (5031, '2012-02-19', 4357.38), (5031, '2013-05-03', 4945.56), (5032, '2012-01-07', 1629.92), (5033, '2012-04-05', 230.46), (5033, '2012-12-25', 2051.01), (5033, '2013-05-30', 2608.07), (5035, '2012-10-27', 2741.1), (5036, '2013-07-29', 1160.2), (5040, '2013-06-09', 612.7), (5041, '2012-07-26', 4532.41), (5042, '2013-09-22', 1731.25), (5043, '2012-11-22', 4502.37), (5044, '2012-02-09', 4713.3), (5045, '2013-08-27', 569.21), (5046, '2012-07-13', 3633.23), (5047, '2013-01-25', 3989.67), (5049, '2012-06-25', 4785.75), (5052, '2013-05-12', 776.19), (5052, '2013-05-29', 3257.51), (5054, '2013-08-08', 1204.16), (5057, '2012-07-09', 3212.12)]"
"From the following table, write a SQL query that counts the unique orders and the highest purchase amount for each customer. Sort the result-set in descending order on 2nd field. Return customer ID, number of distinct orders and highest purchase amount by each customer.","SELECT customer_id, COUNT(DISTINCT ord_no), MAX(purch_amt) FROM orders GROUP BY customer_id ORDER BY 2 DESC;","From the following table, write a SQL query that counts the unique [MASK] and the highest [MASK] amount for each [MASK] Sort the result-set in descending [MASK] on 2nd field. Return [MASK] ID, number of distinct [MASK] and highest [MASK] amount by each [MASK]","[(3037, 4, 4824.13), (3009, 4, 2480.4), (3005, 4, 2608.07), (3055, 3, 3989.67), (3004, 3, 3761.73), (3003, 3, 1895.55), (3002, 3, 5760), (3059, 2, 4357.38), (3057, 2, 4945.56), (3046, 2, 3753.3), (3042, 2, 4638), (3033, 2, 4532.41), (3026, 2, 4205.52), (3015, 2, 4502.37), (3011, 2, 4379.4), (3008, 2, 2771.11), (3058, 1, 1610.05), (3054, 1, 2213.66), (3053, 1, 4785.75), (3050, 1, 1173.26), (3049, 1, 3212.12), (3047, 1, 4970.44), (3045, 1, 1204.16), (3043, 1, 3633.23), (3040, 1, 612.7), (3036, 1, 1663.5), (3035, 1, 2085.39), (3030, 1, 1107.02), (3023, 1, 1887.12), (3020, 1, 3824.93), (3019, 1, 1313.05), (3018, 1, 4713.3), (3014, 1, 776.19), (3012, 1, 469.3), (3007, 1, 2400.6), (3001, 1, 270.65)]"
"From the following tables, write a SQL query to find the salespeople and customers who live in the same city. Return customer name, salesperson name and salesperson city.","SELECT customer.cust_name, salesman.name, salesman.city FROM salesman, customer WHERE salesman.city = customer.city;","From the following tables, write a SQL query to find the [MASK] and [MASK] who live in the same [MASK] Return [MASK] [MASK] [MASK] [MASK] and [MASK] [MASK]","[('Amy Allen', 'James Hoog', 'New York'), ('Angela Alvarez', 'James Hoog', 'New York'), ('Brad Davis', 'James Hoog', 'New York'), ('Hannah Garcia', 'James Hoog', 'New York'), ('Karen Hudson', 'James Hoog', 'New York'), ('Kathleen Holmes', 'James Hoog', 'New York'), ('Nick Rimando', 'James Hoog', 'New York'), ('Sarah Barrera', 'James Hoog', 'New York'), ('Cody Fields', 'Nail Knite', 'Paris'), ('David Perry', 'Nail Knite', 'Paris'), ('Fabian Johnson', 'Nail Knite', 'Paris'), ('Holly Hernandez', 'Nail Knite', 'Paris'), ('Holly Thompson', 'Nail Knite', 'Paris'), ('Jonathon Medina', 'Nail Knite', 'Paris'), ('Larry Martin', 'Nail Knite', 'Paris'), ('Leslie Jensen', 'Nail Knite', 'Paris'), ('Matthew Johnson', 'Nail Knite', 'Paris'), ('Sandra Young', 'Nail Knite', 'Paris'), ('Brad Guzan', 'Pit Alex', 'London'), ('Christopher Marsh', 'Pit Alex', 'London'), ('Dr. John Evans', 'Pit Alex', 'London'), ('Dr. Tracy Pitts', 'Pit Alex', 'London'), ('Jessica Obrien', 'Pit Alex', 'London'), ('Julia Shaffer', 'Pit Alex', 'London'), ('Julian Green', 'Pit Alex', 'London'), ('Kevin Nguyen', 'Pit Alex', 'London'), ('Mary Jacobs', 'Pit Alex', 'London'), ('Michael Foster', 'Pit Alex', 'London'), ('Michael Gordon', 'Pit Alex', 'London'), ('Samantha Park', 'Pit Alex', 'London'), ('Sierra Perry', 'Pit Alex', 'London'), ('Stephen Hurley', 'Pit Alex', 'London'), ('Tiffany Hernandez', 'Pit Alex', 'London'), ('Cody Fields', 'Mc Lyon', 'Paris'), ('David Perry', 'Mc Lyon', 'Paris'), ('Fabian Johnson', 'Mc Lyon', 'Paris'), ('Holly Hernandez', 'Mc Lyon', 'Paris'), ('Holly Thompson', 'Mc Lyon', 'Paris'), ('Jonathon Medina', 'Mc Lyon', 'Paris'), ('Larry Martin', 'Mc Lyon', 'Paris'), ('Leslie Jensen', 'Mc Lyon', 'Paris'), ('Matthew Johnson', 'Mc Lyon', 'Paris'), ('Sandra Young', 'Mc Lyon', 'Paris'), ('Brianna Schmidt', 'Paul Adam', 'Rome'), ('Christy Quinn', 'Paul Adam', 'Rome'), ('Devin Powers', 'Lauson Hen', 'San Jose'), ('Frank Hines', 'Lauson Hen', 'San Jose'), ('Shelby Newman', 'Lauson Hen', 'San Jose'), ('Stephanie Carroll', 'Lauson Hen', 'San Jose'), ('Bryan Tanner', 'Joseph Ferguson', 'California'), ('Cory Williams', 'Joseph Ferguson', 'California'), ('Donald Wilson', 'Joseph Ferguson', 'California'), ('Graham Zusi', 'Joseph Ferguson', 'California'), ('Ricky Carr', 'Joseph Ferguson', 'California'), ('Steven Scott', 'Joseph Ferguson', 'California'), ('Wayne White', 'Joseph Ferguson', 'California'), ('Cody Fields', 'Cindy Roman', 'Paris'), ('David Perry', 'Cindy Roman', 'Paris'), ('Fabian Johnson', 'Cindy Roman', 'Paris'), ('Holly Hernandez', 'Cindy Roman', 'Paris'), ('Holly Thompson', 'Cindy Roman', 'Paris'), ('Jonathon Medina', 'Cindy Roman', 'Paris'), ('Larry Martin', 'Cindy Roman', 'Paris'), ('Leslie Jensen', 'Cindy Roman', 'Paris'), ('Matthew Johnson', 'Cindy Roman', 'Paris'), ('Sandra Young', 'Cindy Roman', 'Paris'), ('Jose Mckay', 'James Conway', 'Moscow'), ('Jozy Altidor', 'James Conway', 'Moscow'), ('Sandra Nixon', 'James Conway', 'Moscow'), ('Sandy Burgess', 'James Conway', 'Moscow'), ('Terry Perez', 'James Conway', 'Moscow'), ('Tracey Smith', 'James Conway', 'Moscow'), ('Brianna Schmidt', 'John Lutz', 'Rome'), ('Christy Quinn', 'John Lutz', 'Rome'), ('Brianna Schmidt', 'Nicole Hardy', 'Rome'), ('Christy Quinn', 'Nicole Hardy', 'Rome'), ('Cody Fields', 'Nichole Rasmussen', 'Paris'), ('David Perry', 'Nichole Rasmussen', 'Paris'), ('Fabian Johnson', 'Nichole Rasmussen', 'Paris'), ('Holly Hernandez', 'Nichole Rasmussen', 'Paris'), ('Holly Thompson', 'Nichole Rasmussen', 'Paris'), ('Jonathon Medina', 'Nichole Rasmussen', 'Paris'), ('Larry Martin', 'Nichole Rasmussen', 'Paris'), ('Leslie Jensen', 'Nichole Rasmussen', 'Paris'), ('Matthew Johnson', 'Nichole Rasmussen', 'Paris'), ('Sandra Young', 'Nichole Rasmussen', 'Paris'), ('Brad Guzan', 'Jesse Wilson DDS', 'London'), ('Christopher Marsh', 'Jesse Wilson DDS', 'London'), ('Dr. John Evans', 'Jesse Wilson DDS', 'London'), ('Dr. Tracy Pitts', 'Jesse Wilson DDS', 'London'), ('Jessica Obrien', 'Jesse Wilson DDS', 'London'), ('Julia Shaffer', 'Jesse Wilson DDS', 'London'), ('Julian Green', 'Jesse Wilson DDS', 'London'), ('Kevin Nguyen', 'Jesse Wilson DDS', 'London'), ('Mary Jacobs', 'Jesse Wilson DDS', 'London'), ('Michael Foster', 'Jesse Wilson DDS', 'London'), ('Michael Gordon', 'Jesse Wilson DDS', 'London'), ('Samantha Park', 'Jesse Wilson DDS', 'London'), ('Sierra Perry', 'Jesse Wilson DDS', 'London'), ('Stephen Hurley', 'Jesse Wilson DDS', 'London'), ('Tiffany Hernandez', 'Jesse Wilson DDS', 'London'), ('Brianna Schmidt', 'Debra Grant', 'Rome'), ('Christy Quinn', 'Debra Grant', 'Rome'), ('Chris Thomas', 'Michael Green', 'Berlin'), ('Dr. Crystal Baker MD', 'Michael Green', 'Berlin'), ('Geoff Cameron', 'Michael Green', 'Berlin'), ('Gerald Walker', 'Michael Green', 'Berlin'), ('Steven Williams', 'Michael Green', 'Berlin'), ('William Dawson', 'Michael Green', 'Berlin'), ('Brianna Schmidt', 'Adrienne Moore', 'Rome'), ('Christy Quinn', 'Adrienne Moore', 'Rome'), ('Chris Thomas', 'Tommy Moore', 'Berlin'), ('Dr. Crystal Baker MD', 'Tommy Moore', 'Berlin'), ('Geoff Cameron', 'Tommy Moore', 'Berlin'), ('Gerald Walker', 'Tommy Moore', 'Berlin'), ('Steven Williams', 'Tommy Moore', 'Berlin'), ('William Dawson', 'Tommy Moore', 'Berlin'), ('Jose Mckay', 'Miss Alexandra Hess', 'Moscow'), ('Jozy Altidor', 'Miss Alexandra Hess', 'Moscow'), ('Sandra Nixon', 'Miss Alexandra Hess', 'Moscow'), ('Sandy Burgess', 'Miss Alexandra Hess', 'Moscow'), ('Terry Perez', 'Miss Alexandra Hess', 'Moscow'), ('Tracey Smith', 'Miss Alexandra Hess', 'Moscow'), ('Amy Allen', 'Drew Skinner', 'New York'), ('Angela Alvarez', 'Drew Skinner', 'New York'), ('Brad Davis', 'Drew Skinner', 'New York'), ('Hannah Garcia', 'Drew Skinner', 'New York'), ('Karen Hudson', 'Drew Skinner', 'New York'), ('Kathleen Holmes', 'Drew Skinner', 'New York'), ('Nick Rimando', 'Drew Skinner', 'New York'), ('Sarah Barrera', 'Drew Skinner', 'New York'), ('Brianna Schmidt', 'Edward Lopez', 'Rome'), ('Christy Quinn', 'Edward Lopez', 'Rome'), ('Brianna Schmidt', 'Benjamin Cooley', 'Rome'), ('Christy Quinn', 'Benjamin Cooley', 'Rome'), ('Cody Fields', 'William Nixon', 'Paris'), ('David Perry', 'William Nixon', 'Paris'), ('Fabian Johnson', 'William Nixon', 'Paris'), ('Holly Hernandez', 'William Nixon', 'Paris'), ('Holly Thompson', 'William Nixon', 'Paris'), ('Jonathon Medina', 'William Nixon', 'Paris'), ('Larry Martin', 'William Nixon', 'Paris'), ('Leslie Jensen', 'William Nixon', 'Paris'), ('Matthew Johnson', 'William Nixon', 'Paris'), ('Sandra Young', 'William Nixon', 'Paris'), ('Bryan Tanner', 'Brandon Warner', 'California'), ('Cory Williams', 'Brandon Warner', 'California'), ('Donald Wilson', 'Brandon Warner', 'California'), ('Graham Zusi', 'Brandon Warner', 'California'), ('Ricky Carr', 'Brandon Warner', 'California'), ('Steven Scott', 'Brandon Warner', 'California'), ('Wayne White', 'Brandon Warner', 'California'), ('Brad Guzan', 'Timothy Ryan', 'London'), ('Christopher Marsh', 'Timothy Ryan', 'London'), ('Dr. John Evans', 'Timothy Ryan', 'London'), ('Dr. Tracy Pitts', 'Timothy Ryan', 'London'), ('Jessica Obrien', 'Timothy Ryan', 'London'), ('Julia Shaffer', 'Timothy Ryan', 'London'), ('Julian Green', 'Timothy Ryan', 'London'), ('Kevin Nguyen', 'Timothy Ryan', 'London'), ('Mary Jacobs', 'Timothy Ryan', 'London'), ('Michael Foster', 'Timothy Ryan', 'London'), ('Michael Gordon', 'Timothy Ryan', 'London'), ('Samantha Park', 'Timothy Ryan', 'London'), ('Sierra Perry', 'Timothy Ryan', 'London'), ('Stephen Hurley', 'Timothy Ryan', 'London'), ('Tiffany Hernandez', 'Timothy Ryan', 'London'), ('Amy Allen', 'Matthew Schultz', 'New York'), ('Angela Alvarez', 'Matthew Schultz', 'New York'), ('Brad Davis', 'Matthew Schultz', 'New York'), ('Hannah Garcia', 'Matthew Schultz', 'New York'), ('Karen Hudson', 'Matthew Schultz', 'New York'), ('Kathleen Holmes', 'Matthew Schultz', 'New York'), ('Nick Rimando', 'Matthew Schultz', 'New York'), ('Sarah Barrera', 'Matthew Schultz', 'New York'), ('Brianna Schmidt', 'Angela Hampton', 'Rome'), ('Christy Quinn', 'Angela Hampton', 'Rome'), ('Jose Mckay', 'Kelly Moore', 'Moscow'), ('Jozy Altidor', 'Kelly Moore', 'Moscow'), ('Sandra Nixon', 'Kelly Moore', 'Moscow'), ('Sandy Burgess', 'Kelly Moore', 'Moscow'), ('Terry Perez', 'Kelly Moore', 'Moscow'), ('Tracey Smith', 'Kelly Moore', 'Moscow'), ('Bryan Tanner', 'Christine Wood DDS', 'California'), ('Cory Williams', 'Christine Wood DDS', 'California'), ('Donald Wilson', 'Christine Wood DDS', 'California'), ('Graham Zusi', 'Christine Wood DDS', 'California'), ('Ricky Carr', 'Christine Wood DDS', 'California'), ('Steven Scott', 'Christine Wood DDS', 'California'), ('Wayne White', 'Christine Wood DDS', 'California'), ('Jose Mckay', 'Tonya Whitaker', 'Moscow'), ('Jozy Altidor', 'Tonya Whitaker', 'Moscow'), ('Sandra Nixon', 'Tonya Whitaker', 'Moscow'), ('Sandy Burgess', 'Tonya Whitaker', 'Moscow'), ('Terry Perez', 'Tonya Whitaker', 'Moscow'), ('Tracey Smith', 'Tonya Whitaker', 'Moscow'), ('Chris Thomas', 'Rachel Diaz', 'Berlin'), ('Dr. Crystal Baker MD', 'Rachel Diaz', 'Berlin'), ('Geoff Cameron', 'Rachel Diaz', 'Berlin'), ('Gerald Walker', 'Rachel Diaz', 'Berlin'), ('Steven Williams', 'Rachel Diaz', 'Berlin'), ('William Dawson', 'Rachel Diaz', 'Berlin'), ('Chris Thomas', 'Sean Torres', 'Berlin'), ('Dr. Crystal Baker MD', 'Sean Torres', 'Berlin'), ('Geoff Cameron', 'Sean Torres', 'Berlin'), ('Gerald Walker', 'Sean Torres', 'Berlin'), ('Steven Williams', 'Sean Torres', 'Berlin'), ('William Dawson', 'Sean Torres', 'Berlin'), ('Cody Fields', 'Jack Waters', 'Paris'), ('David Perry', 'Jack Waters', 'Paris'), ('Fabian Johnson', 'Jack Waters', 'Paris'), ('Holly Hernandez', 'Jack Waters', 'Paris'), ('Holly Thompson', 'Jack Waters', 'Paris'), ('Jonathon Medina', 'Jack Waters', 'Paris'), ('Larry Martin', 'Jack Waters', 'Paris'), ('Leslie Jensen', 'Jack Waters', 'Paris'), ('Matthew Johnson', 'Jack Waters', 'Paris'), ('Sandra Young', 'Jack Waters', 'Paris'), ('Chris Thomas', 'Kelly Abbott', 'Berlin'), ('Dr. Crystal Baker MD', 'Kelly Abbott', 'Berlin'), ('Geoff Cameron', 'Kelly Abbott', 'Berlin'), ('Gerald Walker', 'Kelly Abbott', 'Berlin'), ('Steven Williams', 'Kelly Abbott', 'Berlin'), ('William Dawson', 'Kelly Abbott', 'Berlin'), ('Brad Guzan', 'Jennifer Hernandez', 'London'), ('Christopher Marsh', 'Jennifer Hernandez', 'London'), ('Dr. John Evans', 'Jennifer Hernandez', 'London'), ('Dr. Tracy Pitts', 'Jennifer Hernandez', 'London'), ('Jessica Obrien', 'Jennifer Hernandez', 'London'), ('Julia Shaffer', 'Jennifer Hernandez', 'London'), ('Julian Green', 'Jennifer Hernandez', 'London'), ('Kevin Nguyen', 'Jennifer Hernandez', 'London'), ('Mary Jacobs', 'Jennifer Hernandez', 'London'), ('Michael Foster', 'Jennifer Hernandez', 'London'), ('Michael Gordon', 'Jennifer Hernandez', 'London'), ('Samantha Park', 'Jennifer Hernandez', 'London'), ('Sierra Perry', 'Jennifer Hernandez', 'London'), ('Stephen Hurley', 'Jennifer Hernandez', 'London'), ('Tiffany Hernandez', 'Jennifer Hernandez', 'London'), ('Brad Guzan', 'Hailey Ramirez', 'London'), ('Christopher Marsh', 'Hailey Ramirez', 'London'), ('Dr. John Evans', 'Hailey Ramirez', 'London'), ('Dr. Tracy Pitts', 'Hailey Ramirez', 'London'), ('Jessica Obrien', 'Hailey Ramirez', 'London'), ('Julia Shaffer', 'Hailey Ramirez', 'London'), ('Julian Green', 'Hailey Ramirez', 'London'), ('Kevin Nguyen', 'Hailey Ramirez', 'London'), ('Mary Jacobs', 'Hailey Ramirez', 'London'), ('Michael Foster', 'Hailey Ramirez', 'London'), ('Michael Gordon', 'Hailey Ramirez', 'London'), ('Samantha Park', 'Hailey Ramirez', 'London'), ('Sierra Perry', 'Hailey Ramirez', 'London'), ('Stephen Hurley', 'Hailey Ramirez', 'London'), ('Tiffany Hernandez', 'Hailey Ramirez', 'London'), ('Jose Mckay', 'Elizabeth Estes', 'Moscow'), ('Jozy Altidor', 'Elizabeth Estes', 'Moscow'), ('Sandra Nixon', 'Elizabeth Estes', 'Moscow'), ('Sandy Burgess', 'Elizabeth Estes', 'Moscow'), ('Terry Perez', 'Elizabeth Estes', 'Moscow'), ('Tracey Smith', 'Elizabeth Estes', 'Moscow'), ('Devin Powers', 'Patrick Delgado', 'San Jose'), ('Frank Hines', 'Patrick Delgado', 'San Jose'), ('Shelby Newman', 'Patrick Delgado', 'San Jose'), ('Stephanie Carroll', 'Patrick Delgado', 'San Jose'), ('Devin Powers', 'Michelle Williams', 'San Jose'), ('Frank Hines', 'Michelle Williams', 'San Jose'), ('Shelby Newman', 'Michelle Williams', 'San Jose'), ('Stephanie Carroll', 'Michelle Williams', 'San Jose'), ('Chris Thomas', 'Katherine Burch', 'Berlin'), ('Dr. Crystal Baker MD', 'Katherine Burch', 'Berlin'), ('Geoff Cameron', 'Katherine Burch', 'Berlin'), ('Gerald Walker', 'Katherine Burch', 'Berlin'), ('Steven Williams', 'Katherine Burch', 'Berlin'), ('William Dawson', 'Katherine Burch', 'Berlin'), ('Amy Allen', 'Justin Carter', 'New York'), ('Angela Alvarez', 'Justin Carter', 'New York'), ('Brad Davis', 'Justin Carter', 'New York'), ('Hannah Garcia', 'Justin Carter', 'New York'), ('Karen Hudson', 'Justin Carter', 'New York'), ('Kathleen Holmes', 'Justin Carter', 'New York'), ('Nick Rimando', 'Justin Carter', 'New York'), ('Sarah Barrera', 'Justin Carter', 'New York'), ('Bryan Tanner', 'Jonathan Warren MD', 'California'), ('Cory Williams', 'Jonathan Warren MD', 'California'), ('Donald Wilson', 'Jonathan Warren MD', 'California'), ('Graham Zusi', 'Jonathan Warren MD', 'California'), ('Ricky Carr', 'Jonathan Warren MD', 'California'), ('Steven Scott', 'Jonathan Warren MD', 'California'), ('Wayne White', 'Jonathan Warren MD', 'California'), ('Chris Thomas', 'Jonathan Hansen', 'Berlin'), ('Dr. Crystal Baker MD', 'Jonathan Hansen', 'Berlin'), ('Geoff Cameron', 'Jonathan Hansen', 'Berlin'), ('Gerald Walker', 'Jonathan Hansen', 'Berlin'), ('Steven Williams', 'Jonathan Hansen', 'Berlin'), ('William Dawson', 'Jonathan Hansen', 'Berlin'), ('Brianna Schmidt', 'Timothy Hunter', 'Rome'), ('Christy Quinn', 'Timothy Hunter', 'Rome'), ('Brianna Schmidt', 'Julie Maxwell', 'Rome'), ('Christy Quinn', 'Julie Maxwell', 'Rome'), ('Bryan Tanner', 'Glenn Daugherty', 'California'), ('Cory Williams', 'Glenn Daugherty', 'California'), ('Donald Wilson', 'Glenn Daugherty', 'California'), ('Graham Zusi', 'Glenn Daugherty', 'California'), ('Ricky Carr', 'Glenn Daugherty', 'California'), ('Steven Scott', 'Glenn Daugherty', 'California'), ('Wayne White', 'Glenn Daugherty', 'California'), ('Brad Guzan', 'Kimberly Smith', 'London'), ('Christopher Marsh', 'Kimberly Smith', 'London'), ('Dr. John Evans', 'Kimberly Smith', 'London'), ('Dr. Tracy Pitts', 'Kimberly Smith', 'London'), ('Jessica Obrien', 'Kimberly Smith', 'London'), ('Julia Shaffer', 'Kimberly Smith', 'London'), ('Julian Green', 'Kimberly Smith', 'London'), ('Kevin Nguyen', 'Kimberly Smith', 'London'), ('Mary Jacobs', 'Kimberly Smith', 'London'), ('Michael Foster', 'Kimberly Smith', 'London'), ('Michael Gordon', 'Kimberly Smith', 'London'), ('Samantha Park', 'Kimberly Smith', 'London'), ('Sierra Perry', 'Kimberly Smith', 'London'), ('Stephen Hurley', 'Kimberly Smith', 'London'), ('Tiffany Hernandez', 'Kimberly Smith', 'London'), ('Brad Guzan', 'Matthew Walter', 'London'), ('Christopher Marsh', 'Matthew Walter', 'London'), ('Dr. John Evans', 'Matthew Walter', 'London'), ('Dr. Tracy Pitts', 'Matthew Walter', 'London'), ('Jessica Obrien', 'Matthew Walter', 'London'), ('Julia Shaffer', 'Matthew Walter', 'London'), ('Julian Green', 'Matthew Walter', 'London'), ('Kevin Nguyen', 'Matthew Walter', 'London'), ('Mary Jacobs', 'Matthew Walter', 'London'), ('Michael Foster', 'Matthew Walter', 'London'), ('Michael Gordon', 'Matthew Walter', 'London'), ('Samantha Park', 'Matthew Walter', 'London'), ('Sierra Perry', 'Matthew Walter', 'London'), ('Stephen Hurley', 'Matthew Walter', 'London'), ('Tiffany Hernandez', 'Matthew Walter', 'London'), ('Bryan Tanner', 'Warren Lee', 'California'), ('Cory Williams', 'Warren Lee', 'California'), ('Donald Wilson', 'Warren Lee', 'California'), ('Graham Zusi', 'Warren Lee', 'California'), ('Ricky Carr', 'Warren Lee', 'California'), ('Steven Scott', 'Warren Lee', 'California'), ('Wayne White', 'Warren Lee', 'California'), ('Chris Thomas', 'Carrie Hall', 'Berlin'), ('Dr. Crystal Baker MD', 'Carrie Hall', 'Berlin'), ('Geoff Cameron', 'Carrie Hall', 'Berlin'), ('Gerald Walker', 'Carrie Hall', 'Berlin'), ('Steven Williams', 'Carrie Hall', 'Berlin'), ('William Dawson', 'Carrie Hall', 'Berlin'), ('Chris Thomas', 'Wayne Jenkins', 'Berlin'), ('Dr. Crystal Baker MD', 'Wayne Jenkins', 'Berlin'), ('Geoff Cameron', 'Wayne Jenkins', 'Berlin'), ('Gerald Walker', 'Wayne Jenkins', 'Berlin'), ('Steven Williams', 'Wayne Jenkins', 'Berlin'), ('William Dawson', 'Wayne Jenkins', 'Berlin'), ('Devin Powers', 'Jeremy Stevens', 'San Jose'), ('Frank Hines', 'Jeremy Stevens', 'San Jose'), ('Shelby Newman', 'Jeremy Stevens', 'San Jose'), ('Stephanie Carroll', 'Jeremy Stevens', 'San Jose'), ('Jose Mckay', 'Krista Murphy', 'Moscow'), ('Jozy Altidor', 'Krista Murphy', 'Moscow'), ('Sandra Nixon', 'Krista Murphy', 'Moscow'), ('Sandy Burgess', 'Krista Murphy', 'Moscow'), ('Terry Perez', 'Krista Murphy', 'Moscow'), ('Tracey Smith', 'Krista Murphy', 'Moscow'), ('Bryan Tanner', 'Christina Garza', 'California'), ('Cory Williams', 'Christina Garza', 'California'), ('Donald Wilson', 'Christina Garza', 'California'), ('Graham Zusi', 'Christina Garza', 'California'), ('Ricky Carr', 'Christina Garza', 'California'), ('Steven Scott', 'Christina Garza', 'California'), ('Wayne White', 'Christina Garza', 'California'), ('Brianna Schmidt', 'Brian White', 'Rome'), ('Christy Quinn', 'Brian White', 'Rome'), ('Chris Thomas', 'Corey Jefferson', 'Berlin'), ('Dr. Crystal Baker MD', 'Corey Jefferson', 'Berlin'), ('Geoff Cameron', 'Corey Jefferson', 'Berlin'), ('Gerald Walker', 'Corey Jefferson', 'Berlin'), ('Steven Williams', 'Corey Jefferson', 'Berlin'), ('William Dawson', 'Corey Jefferson', 'Berlin'), ('Jose Mckay', 'Allen Fitzgerald', 'Moscow'), ('Jozy Altidor', 'Allen Fitzgerald', 'Moscow'), ('Sandra Nixon', 'Allen Fitzgerald', 'Moscow'), ('Sandy Burgess', 'Allen Fitzgerald', 'Moscow'), ('Terry Perez', 'Allen Fitzgerald', 'Moscow'), ('Tracey Smith', 'Allen Fitzgerald', 'Moscow')]"
"From the following tables, write a SQL query to find all orders executed by the salesperson and ordered by the customer whose grade is greater than or equal to 200. Compute purch_amt*commission as “Commission”. Return customer name, commission as “Commission%” and Commission.","SELECT ord_no, cust_name, commission AS ""Commission%"", purch_amt * commission AS ""Commission"" FROM salesman, orders, customer WHERE orders.customer_id = customer.customer_id AND orders.salesman_id = salesman.salesman_id AND customer.grade >= 200;","From the following tables, write a SQL query to find all [MASK] executed by the [MASK] and [MASK] by the [MASK] whose [MASK] is greater than or equal to 200. Compute [MASK] as [MASK] Return [MASK] [MASK] [MASK] as [MASK] and [MASK]","[(70001, 'Graham Zusi', 0.13, 19.565), (70007, 'Graham Zusi', 0.13, 123.305), (70005, 'Brad Davis', 0.15, 360.09), (70010, 'Fabian Johnson', 0.14, 277.6802), (70012, 'Julian Green', 0.13, 32.5585), (70011, 'Jozy Altidor', 0.13, 9.787700000000001), (70016, 'Chris Thomas', 0.15, 307.6515), (70019, 'Sierra Perry', 0.13, 356.343), (70021, 'Sierra Perry', 0.11, 438.8637), (70024, 'William Dawson', 0.13, 558.4631), (70025, 'Mary Jacobs', 0.1, 46.93000000000001), (70026, 'William Dawson', 0.12, 540.2844), (70027, 'Jozy Altidor', 0.15, 284.3325), (70028, 'Christopher Marsh', 0.12, 250.24679999999998), (70029, 'Larry Martin', 0.13, 209.3065), (70032, 'Graham Zusi', 0.13, 73.99730000000001), (70033, 'Fabian Johnson', 0.12, 451.4076), (70034, 'Chris Thomas', 0.13, 150.82600000000002), (70035, 'Angela Alvarez', 0.12, 565.596), (70036, 'Cody Fields', 0.1, 321.212), (70038, 'Julian Green', 0.12, 332.5332), (70041, 'Tracey Smith', 0.11, 129.0586), (70043, 'Chris Thomas', 0.13, 483.1931), (70045, 'Steven Williams', 0.13, 602.94), (70048, 'Sandy Burgess', 0.12, 596.4527999999999), (70049, 'Graham Zusi', 0.15, 391.2105), (70050, 'Chris Thomas', 0.14, 675.3782000000001), (70051, 'Holly Thompson', 0.11, 243.50259999999997), (70052, 'Sierra Perry', 0.15, 447.64500000000004), (70056, 'Frank Hines', 0.13, 143.9126), (70058, 'Jozy Altidor', 0.11, 190.4375), (70059, 'Fabian Johnson', 0.11, 345.8895), (70060, 'Steven Williams', 0.14, 143.25220000000002)]"
"From the following table, write a SQL query to find those customers who placed orders on October 5, 2012. Return customer_id, cust_name, city, grade, salesman_id, ord_no, purch_amt, ord_date, customer_id and salesman_id.","SELECT * FROM customer a, orders b WHERE a.customer_id = b.customer_id AND b.ord_date = '2012-10-05';","From the following table, write a SQL query to find those [MASK] who placed [MASK] on October 5, 2012. Return [MASK] [MASK] [MASK] [MASK] [MASK] ord_no, [MASK] [MASK] [MASK] and [MASK]","[(3005, 'Graham Zusi', 'California', 200, 5002, 70001, 150.5, '2012-10-05'), (3002, 'Nick Rimando', 'New York', 100, 5001, 70002, 65.26, '2012-10-05'), (3026, 'Devin Powers', 'San Jose', 187, 5005, 70039, 3991.63, '2012-10-05')]"
"Write a SQL statement to make a report with customer name, city, order number, order date, and order amount in ascending order according to the order date to determine whether any of the existing customers have placed an order or not.","SELECT a.cust_name, a.city, b.ord_no, b.ord_date, b.purch_amt AS ""Order Amount"" FROM customer a LEFT OUTER JOIN orders b ON a.customer_id = b.customer_id ORDER BY b.ord_date;","Write a SQL statement to make a report with [MASK] [MASK] [MASK] [MASK] number, [MASK] [MASK] and [MASK] amount in ascending [MASK] according to the [MASK] [MASK] to determine whether any of the existing [MASK] have placed an [MASK] or not.","[('Amy Allen', 'New York', None, None, None), ('Stephen Hurley', 'London', None, None, None), ('Terry Perez', 'Moscow', None, None, None), ('Gerald Walker', 'Berlin', None, None, None), ('Wayne White', 'California', None, None, None), ('Michael Gordon', 'London', None, None, None), ('Ricky Carr', 'California', None, None, None), ('Donald Wilson', 'California', None, None, None), ('Christy Quinn', 'Rome', None, None, None), ('Dr. Tracy Pitts', 'London', None, None, None), ('Kathleen Holmes', 'New York', None, None, None), ('Bryan Tanner', 'California', None, None, None), ('Cory Williams', 'California', None, None, None), ('Jonathon Medina', 'Paris', None, None, None), ('Shelby Newman', 'San Jose', None, None, None), ('Sandra Young', 'Paris', None, None, None), ('Tiffany Hernandez', 'London', None, None, None), ('Brianna Schmidt', 'Rome', None, None, None), ('Steven Scott', 'California', None, None, None), ('Stephanie Carroll', 'San Jose', None, None, None), ('Dr. John Evans', 'London', None, None, None), ('Julia Shaffer', 'London', None, None, None), ('Jose Mckay', 'Moscow', 70047, '2012-01-07', 1629.92), ('Angela Alvarez', 'New York', 70035, '2012-02-09', 4713.3), ('Hannah Garcia', 'New York', 70020, '2012-02-10', 948.26), ('Hannah Garcia', 'New York', 70015, '2012-02-19', 4357.38), ('Jessica Obrien', 'London', 70014, '2012-02-23', 2608.23), ('Sandy Burgess', 'Moscow', 70048, '2012-03-05', 4970.44), ('Frank Hines', 'San Jose', 70056, '2012-03-21', 1107.02), ('William Dawson', 'Berlin', 70024, '2012-03-23', 4295.87), ('Leslie Jensen', 'Paris', 70017, '2012-04-05', 230.46), ('Nick Rimando', 'New York', 70013, '2012-04-25', 3045.6), ('Kevin Nguyen', 'London', 70031, '2012-05-03', 1663.5), ('Chris Thomas', 'Berlin', 70050, '2012-05-21', 4824.13), ('Jozy Altidor', 'Moscow', 70027, '2012-06-25', 1895.55), ('David Perry', 'Paris', 70030, '2012-06-25', 4785.75), ('Julian Green', 'London', 70012, '2012-06-27', 250.45), ('Cody Fields', 'Paris', 70036, '2012-07-09', 3212.12), ('Sarah Barrera', 'New York', 70054, '2012-07-13', 3633.23), ('Jessica Obrien', 'London', 70022, '2012-07-26', 4532.41), ('Brad Davis', 'New York', 70005, '2012-07-27', 2400.6), ('Julian Green', 'London', 70038, '2012-08-12', 2771.11), ('Tracey Smith', 'Moscow', 70041, '2012-08-12', 1173.26), ('Geoff Cameron', 'Berlin', 70004, '2012-08-17', 110.5), ('Jozy Altidor', 'Moscow', 70011, '2012-08-17', 75.29), ('Fabian Johnson', 'Paris', 70059, '2012-08-22', 3144.45), ('Leslie Jensen', 'Paris', 70061, '2012-08-28', 4379.4), ('Geoff Cameron', 'Berlin', 70018, '2012-09-09', 1812.19), ('Nick Rimando', 'New York', 70008, '2012-09-10', 5760), ('Graham Zusi', 'California', 70007, '2012-09-10', 948.5), ('Brad Guzan', 'London', 70009, '2012-09-10', 270.65), ('Nick Rimando', 'New York', 70002, '2012-10-05', 65.26), ('Graham Zusi', 'California', 70001, '2012-10-05', 150.5), ('Devin Powers', 'San Jose', 70039, '2012-10-05', 3991.63), ('Fabian Johnson', 'Paris', 70010, '2012-10-10', 1983.43), ('Geoff Cameron', 'Berlin', 70003, '2012-10-10', 2480.4), ('Sierra Perry', 'London', 70019, '2012-10-27', 2741.1), ('Chris Thomas', 'Berlin', 70043, '2012-11-01', 3716.87), ('Steven Williams', 'Berlin', 70045, '2012-11-08', 4638), ('Mary Jacobs', 'London', 70025, '2012-11-10', 469.3), ('William Dawson', 'Berlin', 70026, '2012-11-22', 4502.37), ('Sandra Nixon', 'Moscow', 70023, '2012-11-22', 1887.12), ('Holly Hernandez', 'Paris', 70037, '2012-12-01', 3824.93), ('Chris Thomas', 'Berlin', 70016, '2012-12-25', 2051.01), ('Sierra Perry', 'London', 70021, '2013-01-25', 3989.67), ('Karen Hudson', 'New York', 70063, '2013-02-23', 1313.05), ('Sierra Perry', 'London', 70052, '2013-03-10', 2984.3), ('Devin Powers', 'San Jose', 70040, '2013-03-21', 4205.52), ('Christopher Marsh', 'London', 70028, '2013-03-29', 2085.39), ('Larry Martin', 'Paris', 70029, '2013-04-03', 1610.05), ('Geoff Cameron', 'Berlin', 70042, '2013-04-07', 2434.26), ('Steven Williams', 'Berlin', 70060, '2013-04-15', 1023.23), ('Holly Thompson', 'Paris', 70051, '2013-04-26', 2213.66), ('Michael Foster', 'London', 70057, '2013-05-03', 4945.56), ('Dr. Crystal Baker MD', 'Berlin', 70044, '2013-05-12', 776.19), ('Michael Foster', 'London', 70053, '2013-05-29', 3257.51), ('Graham Zusi', 'California', 70049, '2013-05-30', 2608.07), ('Matthew Johnson', 'Paris', 70046, '2013-06-09', 612.7), ('Jose Mckay', 'Moscow', 70062, '2013-07-27', 3753.3), ('Chris Thomas', 'Berlin', 70034, '2013-07-29', 1160.2), ('Samantha Park', 'London', 70055, '2013-08-08', 1204.16), ('Fabian Johnson', 'Paris', 70033, '2013-08-21', 3761.73), ('Graham Zusi', 'California', 70032, '2013-08-27', 569.21), ('Jozy Altidor', 'Moscow', 70058, '2013-09-22', 1731.25)]"
List the names of customers and their corresponding salesmen for customers who have placed orders over $1000.,"SELECT c.cust_name, s.name FROM customer c JOIN orders o ON c.customer_id = o.customer_id JOIN salesman s ON c.salesman_id = s.salesman_id WHERE o.purch_amt > 1000;",List the [MASK] of [MASK] and their corresponding [MASK] for [MASK] who have placed [MASK] over $1000.,"[('Brad Davis', 'James Hoog'), ('Nick Rimando', 'James Hoog'), ('Fabian Johnson', 'Mc Lyon'), ('Geoff Cameron', 'Lauson Hen'), ('Nick Rimando', 'James Hoog'), ('Jessica Obrien', 'Timothy Hunter'), ('Hannah Garcia', 'Edward Lopez'), ('Chris Thomas', 'Warren Lee'), ('Geoff Cameron', 'Lauson Hen'), ('Sierra Perry', 'Paul Adam'), ('Sierra Perry', 'Paul Adam'), ('Jessica Obrien', 'Timothy Hunter'), ('Sandra Nixon', 'Jesse Wilson DDS'), ('William Dawson', 'Glenn Daugherty'), ('William Dawson', 'Glenn Daugherty'), ('Jozy Altidor', 'Paul Adam'), ('Christopher Marsh', 'Matthew Schultz'), ('Larry Martin', 'Corey Jefferson'), ('David Perry', 'Cindy Roman'), ('Kevin Nguyen', 'Christina Garza'), ('Fabian Johnson', 'Mc Lyon'), ('Chris Thomas', 'Warren Lee'), ('Angela Alvarez', 'Nicole Hardy'), ('Cody Fields', 'Patrick Delgado'), ('Holly Hernandez', 'Hailey Ramirez'), ('Julian Green', 'Nail Knite'), ('Devin Powers', 'Miss Alexandra Hess'), ('Devin Powers', 'Miss Alexandra Hess'), ('Tracey Smith', 'Tommy Moore'), ('Geoff Cameron', 'Lauson Hen'), ('Chris Thomas', 'Warren Lee'), ('Steven Williams', 'William Nixon'), ('Jose Mckay', 'Jeremy Stevens'), ('Sandy Burgess', 'James Conway'), ('Graham Zusi', 'Nail Knite'), ('Chris Thomas', 'Warren Lee'), ('Holly Thompson', 'Matthew Schultz'), ('Sierra Perry', 'Paul Adam'), ('Michael Foster', 'Mc Lyon'), ('Sarah Barrera', 'James Conway'), ('Samantha Park', 'Christina Garza'), ('Frank Hines', 'Pit Alex'), ('Michael Foster', 'Mc Lyon'), ('Jozy Altidor', 'Paul Adam'), ('Fabian Johnson', 'Mc Lyon'), ('Steven Williams', 'William Nixon'), ('Leslie Jensen', 'Tommy Moore'), ('Jose Mckay', 'Jeremy Stevens'), ('Karen Hudson', 'Jonathan Hansen')]"
Find the total number of orders placed by customers in each city.,"SELECT c.city, COUNT(o.ord_no) AS total_orders FROM customer c JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.city;",Find the total number of [MASK] placed by [MASK] in each [MASK],"[('Berlin', 13), ('California', 4), ('London', 14), ('Moscow', 8), ('New York', 9), ('Paris', 11), ('San Jose', 3)]"
Identify salespeople who have not sold to any customer in 'New York'.,SELECT s.name FROM salesman s WHERE NOT EXISTS (SELECT * FROM customer c WHERE c.city = 'New York' AND c.salesman_id = s.salesman_id);,[MASK] [MASK] who have not sold to any [MASK] in 'New York'.,"[('Nail Knite',), ('Pit Alex',), ('Mc Lyon',), ('Paul Adam',), ('Lauson Hen',), ('Joseph Ferguson',), ('Cindy Roman',), ('John Lutz',), ('Nichole Rasmussen',), ('Jesse Wilson DDS',), ('Debra Grant',), ('Michael Green',), ('Adrienne Moore',), ('Tommy Moore',), ('Miss Alexandra Hess',), ('Drew Skinner',), ('Benjamin Cooley',), ('William Nixon',), ('Brandon Warner',), ('Timothy Ryan',), ('Matthew Schultz',), ('Angela Hampton',), ('Kelly Moore',), ('Christine Wood DDS',), ('Tonya Whitaker',), ('Rachel Diaz',), ('Sean Torres',), ('Jack Waters',), ('Kelly Abbott',), ('Jennifer Hernandez',), ('Hailey Ramirez',), ('Elizabeth Estes',), ('Patrick Delgado',), ('Michelle Williams',), ('Katherine Burch',), ('Justin Carter',), ('Jonathan Warren MD',), ('Timothy Hunter',), ('Julie Maxwell',), ('Glenn Daugherty',), ('Kimberly Smith',), ('Matthew Walter',), ('Warren Lee',), ('Carrie Hall',), ('Wayne Jenkins',), ('Jeremy Stevens',), ('Krista Murphy',), ('Christina Garza',), ('Brian White',), ('Corey Jefferson',), ('Allen Fitzgerald',)]"
"Determine the average order value for each salesman, ordered by average order value in descending order.","SELECT s.name, AVG(o.purch_amt) AS avg_order_value FROM salesman s JOIN orders o ON s.salesman_id = o.salesman_id GROUP BY s.salesman_id ORDER BY AVG(o.purch_amt) DESC;",Determine the average [MASK] value for each [MASK] [MASK] by average [MASK] value in descending [MASK],"[('Michael Green', 4970.44), ('Warren Lee', 4785.75), ('Timothy Hunter', 4713.3), ('Rachel Diaz', 4651.47), ('Angela Hampton', 4638.0), ('Justin Carter', 4532.41), ('Jonathan Hansen', 4502.37), ('Kimberly Smith', 3989.67), ('Timothy Ryan', 3761.73), ('Cindy Roman', 3716.87), ('Glenn Daugherty', 3633.23), ('Allen Fitzgerald', 3212.12), ('Mc Lyon', 3181.415), ('Benjamin Cooley', 3144.45), ('Tonya Whitaker', 3019.295), ('James Hoog', 3004.952), ('Matthew Schultz', 2923.6800000000003), ('Jennifer Hernandez', 2741.1), ('Debra Grant', 2689.67), ('Miss Alexandra Hess', 2656.2700000000004), ('Christine Wood DDS', 2439.925), ('Paul Adam', 2185.58), ('Pit Alex', 2131.14), ('Jeremy Stevens', 2016.8500000000001), ('Nichole Rasmussen', 1986.2549999999999), ('James Conway', 1873.6550000000002), ('Jonathan Warren MD', 1731.25), ('Sean Torres', 1629.92), ('Jack Waters', 1629.846666666667), ('Lauson Hen', 1467.6966666666667), ('Joseph Ferguson', 1418.38), ('Christina Garza', 1204.16), ('Hailey Ramirez', 1160.2), ('John Lutz', 948.26), ('Nail Knite', 739.875), ('Katherine Burch', 612.7), ('Julie Maxwell', 569.21), ('William Nixon', 469.3)]"
Count the number of salespeople who have a commission rate higher than the average commission rate of all salespeople.,SELECT COUNT(*) FROM salesman WHERE commission > (SELECT AVG(commission) FROM salesman);,Count the number of [MASK] who have a [MASK] rate higher than the average [MASK] rate of all [MASK],"[(25,)]"
Display the name of each salesman along with their highest single order amount.,"SELECT s.name, MAX(o.purch_amt) FROM salesman s JOIN orders o ON s.salesman_id = o.salesman_id GROUP BY s.salesman_id;",[MASK] the [MASK] of each [MASK] along with their highest single [MASK] amount.,"[('James Hoog', 5760), ('Nail Knite', 1610.05), ('Lauson Hen', 2480.4), ('Pit Alex', 3991.63), ('Mc Lyon', 4379.4), ('Paul Adam', 4295.87), ('Joseph Ferguson', 1663.5), ('Cindy Roman', 3716.87), ('James Conway', 2434.26), ('John Lutz', 948.26), ('Nichole Rasmussen', 2085.39), ('Debra Grant', 2771.11), ('Michael Green', 4970.44), ('Miss Alexandra Hess', 4205.52), ('Benjamin Cooley', 3144.45), ('William Nixon', 469.3), ('Timothy Ryan', 3761.73), ('Matthew Schultz', 4824.13), ('Angela Hampton', 4638), ('Christine Wood DDS', 2984.3), ('Tonya Whitaker', 3824.93), ('Rachel Diaz', 4945.56), ('Sean Torres', 1629.92), ('Jack Waters', 2608.07), ('Jennifer Hernandez', 2741.1), ('Hailey Ramirez', 1160.2), ('Katherine Burch', 612.7), ('Justin Carter', 4532.41), ('Jonathan Warren MD', 1731.25), ('Jonathan Hansen', 4502.37), ('Timothy Hunter', 4713.3), ('Julie Maxwell', 569.21), ('Glenn Daugherty', 3633.23), ('Kimberly Smith', 3989.67), ('Warren Lee', 4785.75), ('Jeremy Stevens', 3257.51), ('Christina Garza', 1204.16), ('Allen Fitzgerald', 3212.12)]"
"List all salesmen and the total number of orders they have processed, including those with zero orders.","SELECT s.name, COUNT(o.ord_no) FROM salesman s LEFT JOIN orders o ON s.salesman_id = o.salesman_id GROUP BY s.salesman_id;","List all [MASK] and the total number of [MASK] they have processed, including those with zero [MASK]","[('James Hoog', 5), ('Nail Knite', 4), ('Lauson Hen', 3), ('Pit Alex', 2), ('Mc Lyon', 2), ('Paul Adam', 2), ('Joseph Ferguson', 2), ('Cindy Roman', 1), ('James Conway', 2), ('John Lutz', 1), ('Nicole Hardy', 0), ('Nichole Rasmussen', 2), ('Jesse Wilson DDS', 0), ('Debra Grant', 2), ('Michael Green', 1), ('Adrienne Moore', 0), ('Tommy Moore', 0), ('Miss Alexandra Hess', 2), ('Drew Skinner', 0), ('Edward Lopez', 0), ('Benjamin Cooley', 1), ('William Nixon', 1), ('Brandon Warner', 0), ('Timothy Ryan', 1), ('Matthew Schultz', 2), ('Angela Hampton', 1), ('Kelly Moore', 0), ('Christine Wood DDS', 2), ('Tonya Whitaker', 2), ('Rachel Diaz', 2), ('Sean Torres', 1), ('Jack Waters', 3), ('Kelly Abbott', 0), ('Jennifer Hernandez', 1), ('Hailey Ramirez', 1), ('Elizabeth Estes', 0), ('Patrick Delgado', 0), ('Michelle Williams', 0), ('Katherine Burch', 1), ('Justin Carter', 1), ('Jonathan Warren MD', 1), ('Jonathan Hansen', 1), ('Timothy Hunter', 1), ('Julie Maxwell', 1), ('Glenn Daugherty', 1), ('Kimberly Smith', 1), ('Matthew Walter', 0), ('Warren Lee', 1), ('Carrie Hall', 0), ('Wayne Jenkins', 0), ('Jeremy Stevens', 2), ('Krista Murphy', 0), ('Christina Garza', 1), ('Brian White', 0), ('Corey Jefferson', 0), ('Allen Fitzgerald', 1)]"
Calculate the total sales amount for salespeople based in 'Paris'.,SELECT SUM(o.purch_amt) FROM salesman s JOIN orders o ON s.salesman_id = o.salesman_id WHERE s.city = 'Paris';,Calculate the total [MASK] amount for [MASK] based in 'Paris'.,"[(22370.549999999996,)]"
Find customers who have been served by more than one salesman.,SELECT c.cust_name FROM customer c JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.customer_id HAVING COUNT(DISTINCT c.salesman_id) > 1;,Find [MASK] who have been served by more than one [MASK],
Show the date of the first order placed by each customer.,"SELECT c.cust_name, MIN(o.ord_date) FROM customer c JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.customer_id;",Show the [MASK] of the first [MASK] placed by each [MASK],"[('Brad Guzan', '2012-09-10'), ('Nick Rimando', '2012-04-25'), ('Jozy Altidor', '2012-06-25'), ('Fabian Johnson', '2012-08-22'), ('Graham Zusi', '2012-09-10'), ('Brad Davis', '2012-07-27'), ('Julian Green', '2012-06-27'), ('Geoff Cameron', '2012-08-17'), ('Leslie Jensen', '2012-04-05'), ('Mary Jacobs', '2012-11-10'), ('Dr. Crystal Baker MD', '2013-05-12'), ('William Dawson', '2012-03-23'), ('Angela Alvarez', '2012-02-09'), ('Karen Hudson', '2013-02-23'), ('Holly Hernandez', '2012-12-01'), ('Sandra Nixon', '2012-11-22'), ('Devin Powers', '2012-10-05'), ('Frank Hines', '2012-03-21'), ('Jessica Obrien', '2012-02-23'), ('Christopher Marsh', '2013-03-29'), ('Kevin Nguyen', '2012-05-03'), ('Chris Thomas', '2012-05-21'), ('Matthew Johnson', '2013-06-09'), ('Steven Williams', '2012-11-08'), ('Sarah Barrera', '2012-07-13'), ('Samantha Park', '2013-08-08'), ('Jose Mckay', '2012-01-07'), ('Sandy Burgess', '2012-03-05'), ('Cody Fields', '2012-07-09'), ('Tracey Smith', '2012-08-12'), ('David Perry', '2012-06-25'), ('Holly Thompson', '2013-04-26'), ('Sierra Perry', '2012-10-27'), ('Michael Foster', '2013-05-03'), ('Larry Martin', '2013-04-03'), ('Hannah Garcia', '2012-02-10')]"
List the top 3 customers by total order amount in 'London'.,"SELECT c.cust_name, SUM(o.purch_amt) AS total_order_amount FROM customer c JOIN orders o ON c.customer_id = o.customer_id WHERE c.city = 'London' GROUP BY c.customer_id ORDER BY total_order_amount DESC LIMIT 3;",List the top 3 [MASK] by total [MASK] amount in 'London'.,"[('Sierra Perry', 9715.07), ('Michael Foster', 8203.07), ('Jessica Obrien', 7140.639999999999)]"
"For each salesman, count how many orders above $500 they have processed.","SELECT s.name, COUNT(*) FROM salesman s JOIN orders o ON s.salesman_id = o.salesman_id WHERE o.purch_amt > 500 GROUP BY s.salesman_id;",For each [MASK] count how many [MASK] above $500 they have processed.,"[('James Hoog', 4), ('Nail Knite', 2), ('Lauson Hen', 2), ('Pit Alex', 1), ('Mc Lyon', 2), ('Paul Adam', 1), ('Joseph Ferguson', 2), ('Cindy Roman', 1), ('James Conway', 2), ('John Lutz', 1), ('Nichole Rasmussen', 2), ('Debra Grant', 2), ('Michael Green', 1), ('Miss Alexandra Hess', 2), ('Benjamin Cooley', 1), ('Timothy Ryan', 1), ('Matthew Schultz', 2), ('Angela Hampton', 1), ('Christine Wood DDS', 2), ('Tonya Whitaker', 2), ('Rachel Diaz', 2), ('Sean Torres', 1), ('Jack Waters', 2), ('Jennifer Hernandez', 1), ('Hailey Ramirez', 1), ('Katherine Burch', 1), ('Justin Carter', 1), ('Jonathan Warren MD', 1), ('Jonathan Hansen', 1), ('Timothy Hunter', 1), ('Julie Maxwell', 1), ('Glenn Daugherty', 1), ('Kimberly Smith', 1), ('Warren Lee', 1), ('Jeremy Stevens', 2), ('Christina Garza', 1), ('Allen Fitzgerald', 1)]"
Identify the month with the highest total sales amount.,"SELECT STRFTIME('%Y-%m', ord_date) AS month, SUM(o.purch_amt) AS total_sales FROM orders o GROUP BY month ORDER BY total_sales DESC LIMIT 1;",[MASK] the month with the highest total [MASK] amount.,"[('2012-11', 15213.66)]"
Find all customers who have not placed any order since 2012-01-01.,SELECT c.cust_name FROM customer c LEFT JOIN orders o ON c.customer_id = o.customer_id WHERE o.ord_date < '2012-01-01' OR o.ord_no IS NULL;,Find all [MASK] who have not placed any [MASK] since 2012-01-01.,"[('Amy Allen',), ('Stephen Hurley',), ('Terry Perez',), ('Gerald Walker',), ('Wayne White',), ('Michael Gordon',), ('Ricky Carr',), ('Donald Wilson',), ('Christy Quinn',), ('Dr. Tracy Pitts',), ('Kathleen Holmes',), ('Bryan Tanner',), ('Cory Williams',), ('Jonathon Medina',), ('Shelby Newman',), ('Sandra Young',), ('Tiffany Hernandez',), ('Brianna Schmidt',), ('Steven Scott',), ('Stephanie Carroll',), ('Dr. John Evans',), ('Julia Shaffer',)]"
List salesmen who have processed orders but have never sold to customers in 'California'.,SELECT DISTINCT s.name FROM salesman s JOIN orders o ON s.salesman_id = o.salesman_id LEFT JOIN customer c ON o.customer_id = c.customer_id WHERE c.city <> 'California' OR c.city IS NULL;,List [MASK] who have processed [MASK] but have never sold to [MASK] in 'California'.,"[('Pit Alex',), ('James Hoog',), ('Lauson Hen',), ('Mc Lyon',), ('Nail Knite',), ('Paul Adam',), ('Debra Grant',), ('Rachel Diaz',), ('Jack Waters',), ('Jennifer Hernandez',), ('John Lutz',), ('Kimberly Smith',), ('Justin Carter',), ('Nichole Rasmussen',), ('William Nixon',), ('Jonathan Hansen',), ('Christine Wood DDS',), ('Warren Lee',), ('Joseph Ferguson',), ('Timothy Ryan',), ('Hailey Ramirez',), ('Timothy Hunter',), ('Allen Fitzgerald',), ('Tonya Whitaker',), ('Miss Alexandra Hess',), ('James Conway',), ('Cindy Roman',), ('Jeremy Stevens',), ('Angela Hampton',), ('Katherine Burch',), ('Sean Torres',), ('Michael Green',), ('Matthew Schultz',), ('Glenn Daugherty',), ('Christina Garza',), ('Jonathan Warren MD',), ('Benjamin Cooley',)]"
Show cities that have generated total orders over $5000.,"SELECT c.city, SUM(o.purch_amt) FROM orders o JOIN customer c ON o.customer_id = c.customer_id GROUP BY c.city HAVING SUM(o.purch_amt) > 5000;",Show [MASK] that have generated total [MASK] over $5000.,"[('Berlin', 33825.22), ('London', 33773.340000000004), ('Moscow', 17116.13), ('New York', 26236.679999999997), ('Paris', 29758.68), ('San Jose', 9304.170000000002)]"
Determine the total number of unique cities where salesmen are located.,SELECT COUNT(DISTINCT s.city) FROM salesman s;,Determine the total number of unique [MASK] where [MASK] are located.,"[(8,)]"
Identify the salesman with the lowest total sales amount and list all of his customers.,"SELECT s.name, c.cust_name FROM salesman s JOIN customer c ON s.salesman_id = c.salesman_id LEFT JOIN orders o ON s.salesman_id = o.salesman_id GROUP BY s.salesman_id ORDER BY SUM(o.purch_amt) ASC LIMIT 1;",[MASK] the [MASK] with the lowest total [MASK] amount and list all of his [MASK],"[('Nicole Hardy', 'Angela Alvarez')]"
Calculate the difference between the highest and lowest order amounts for each salesman.,"SELECT s.name, MAX(o.purch_amt) - MIN(o.purch_amt) FROM salesman s JOIN orders o ON s.salesman_id = o.salesman_id GROUP BY s.salesman_id;",Calculate the difference between the highest and lowest [MASK] amounts for each [MASK],"[('James Hoog', 5694.74), ('Nail Knite', 1459.55), ('Lauson Hen', 2369.9), ('Pit Alex', 3720.98), ('Mc Lyon', 2395.9699999999993), ('Paul Adam', 4220.58), ('Joseph Ferguson', 490.24), ('Cindy Roman', 0.0), ('James Conway', 1121.2100000000003), ('John Lutz', 0.0), ('Nichole Rasmussen', 198.26999999999998), ('Debra Grant', 162.8800000000001), ('Michael Green', 0.0), ('Miss Alexandra Hess', 3098.5000000000005), ('Benjamin Cooley', 0.0), ('William Nixon', 0.0), ('Timothy Ryan', 0.0), ('Matthew Schultz', 3800.9), ('Angela Hampton', 0), ('Christine Wood DDS', 1088.7500000000002), ('Tonya Whitaker', 1611.27), ('Rachel Diaz', 588.1800000000003), ('Sean Torres', 0.0), ('Jack Waters', 2377.61), ('Jennifer Hernandez', 0.0), ('Hailey Ramirez', 0.0), ('Katherine Burch', 0.0), ('Justin Carter', 0.0), ('Jonathan Warren MD', 0.0), ('Jonathan Hansen', 0.0), ('Timothy Hunter', 0.0), ('Julie Maxwell', 0.0), ('Glenn Daugherty', 0.0), ('Kimberly Smith', 0.0), ('Warren Lee', 0.0), ('Jeremy Stevens', 2481.32), ('Christina Garza', 0.0), ('Allen Fitzgerald', 0.0)]"
List each salesman's name and their largest single sale amount to any customer.,"SELECT s.name, MAX(o.purch_amt) FROM salesman s JOIN orders o ON s.salesman_id = o.salesman_id GROUP BY s.salesman_id;",List each [MASK] [MASK] and their largest single [MASK] amount to any [MASK],"[('James Hoog', 5760), ('Nail Knite', 1610.05), ('Lauson Hen', 2480.4), ('Pit Alex', 3991.63), ('Mc Lyon', 4379.4), ('Paul Adam', 4295.87), ('Joseph Ferguson', 1663.5), ('Cindy Roman', 3716.87), ('James Conway', 2434.26), ('John Lutz', 948.26), ('Nichole Rasmussen', 2085.39), ('Debra Grant', 2771.11), ('Michael Green', 4970.44), ('Miss Alexandra Hess', 4205.52), ('Benjamin Cooley', 3144.45), ('William Nixon', 469.3), ('Timothy Ryan', 3761.73), ('Matthew Schultz', 4824.13), ('Angela Hampton', 4638), ('Christine Wood DDS', 2984.3), ('Tonya Whitaker', 3824.93), ('Rachel Diaz', 4945.56), ('Sean Torres', 1629.92), ('Jack Waters', 2608.07), ('Jennifer Hernandez', 2741.1), ('Hailey Ramirez', 1160.2), ('Katherine Burch', 612.7), ('Justin Carter', 4532.41), ('Jonathan Warren MD', 1731.25), ('Jonathan Hansen', 4502.37), ('Timothy Hunter', 4713.3), ('Julie Maxwell', 569.21), ('Glenn Daugherty', 3633.23), ('Kimberly Smith', 3989.67), ('Warren Lee', 4785.75), ('Jeremy Stevens', 3257.51), ('Christina Garza', 1204.16), ('Allen Fitzgerald', 3212.12)]"
Show the total number of orders placed on weekends.,"SELECT COUNT(*) FROM orders WHERE STRFTIME('%w', ord_date) IN ('0', '6');",Show the total number of [MASK] placed on weekends.,"[(15,)]"
Determine the average number of days between orders for each customer.,"SELECT c.cust_name, AVG(julianday(o2.ord_date) - julianday(o1.ord_date)) AS avg_days_between_orders FROM orders o1 JOIN orders o2 ON o1.customer_id = o2.customer_id AND o2.ord_date > o1.ord_date JOIN customer c ON o1.customer_id = c.customer_id GROUP BY o1.customer_id;",Determine the average number of days between [MASK] for each [MASK],"[('Nick Rimando', 108.66666666666667), ('Jozy Altidor', 302.6666666666667), ('Fabian Johnson', 242.66666666666666), ('Graham Zusi', 215.0), ('Julian Green', 46.0), ('Geoff Cameron', 121.66666666666667), ('Leslie Jensen', 145.0), ('William Dawson', 244.0), ('Devin Powers', 167.0), ('Jessica Obrien', 154.0), ('Chris Thomas', 226.0), ('Steven Williams', 158.0), ('Jose Mckay', 567.0), ('Sierra Perry', 89.33333333333333), ('Michael Foster', 26.0), ('Hannah Garcia', 9.0)]"
"List customers and their last order date, for those who have placed more than 5 orders.","SELECT c.cust_name, MAX(o.ord_date) FROM customer c JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.customer_id HAVING COUNT(o.ord_no) > 5;",List [MASK] and their last [MASK] [MASK] for those who have placed more than 5 [MASK],
Identify the salesman who has the most customers with a grade above 200.,SELECT s.name FROM salesman s JOIN customer c ON s.salesman_id = c.salesman_id WHERE c.grade > 200 GROUP BY s.salesman_id ORDER BY COUNT(c.customer_id) DESC LIMIT 1;,[MASK] the [MASK] who has the most [MASK] with a [MASK] above 200.,"[('Corey Jefferson',)]"
List all salesmen and their respective customers from New York.,"SELECT s.name AS Salesman_Name, c.cust_name AS Customer_Name FROM salesman s JOIN customer c ON s.salesman_id = c.salesman_id WHERE c.city = 'New York';",List all [MASK] and their respective [MASK] from New York.,"[('James Hoog', 'Nick Rimando'), ('James Hoog', 'Brad Davis'), ('James Conway', 'Amy Allen'), ('Nicole Hardy', 'Angela Alvarez'), ('Jonathan Hansen', 'Karen Hudson'), ('Jonathan Hansen', 'Kathleen Holmes'), ('James Conway', 'Sarah Barrera'), ('Edward Lopez', 'Hannah Garcia')]"
How many orders were placed by customers in Paris?,SELECT COUNT(o.ord_no) AS Total_Orders FROM orders o JOIN customer c ON o.customer_id = c.customer_id WHERE c.city = 'Paris';,How many [MASK] were placed by [MASK] in Paris?,"[(11,)]"
Identify the salesman with the highest commission in Paris.,"SELECT name, MAX(commission) AS Highest_Commission FROM salesman WHERE city = 'Paris';",[MASK] the [MASK] with the highest [MASK] in Paris.,"[('Jack Waters', 0.15)]"
Show the total purchase amount for orders placed in October 2012.,SELECT SUM(purch_amt) AS Total_Purchase_Amount FROM orders WHERE ord_date BETWEEN '2012-10-01' AND '2012-10-31';,Show the total [MASK] amount for [MASK] placed in October 2012.,"[(11412.32,)]"
Find all customers served by salesmen from their same city.,"SELECT c.cust_name AS Customer_Name, s.name AS Salesman_Name FROM customer c JOIN salesman s ON c.salesman_id = s.salesman_id WHERE c.city = s.city;",Find all [MASK] served by [MASK] from their same [MASK],"[('Nick Rimando', 'James Hoog'), ('Brad Davis', 'James Hoog'), ('Fabian Johnson', 'Mc Lyon'), ('Brad Guzan', 'Pit Alex'), ('Dr. Crystal Baker MD', 'Katherine Burch'), ('Donald Wilson', 'Jonathan Warren MD'), ('Christy Quinn', 'Adrienne Moore'), ('Dr. Tracy Pitts', 'Pit Alex'), ('Matthew Johnson', 'Mc Lyon'), ('Sandy Burgess', 'James Conway'), ('Steven Scott', 'Joseph Ferguson'), ('David Perry', 'Cindy Roman')]"
What is the average purchase amount of orders handled by each salesman?,"SELECT s.name AS Salesman_Name, AVG(o.purch_amt) AS Average_Purchase_Amount FROM orders o JOIN salesman s ON o.salesman_id = s.salesman_id GROUP BY s.salesman_id;",What is the average [MASK] amount of [MASK] handled by each [MASK],"[('James Hoog', 3004.952), ('Nail Knite', 739.875), ('Lauson Hen', 1467.6966666666667), ('Pit Alex', 2131.14), ('Mc Lyon', 3181.415), ('Paul Adam', 2185.58), ('Joseph Ferguson', 1418.38), ('Cindy Roman', 3716.87), ('James Conway', 1873.6550000000002), ('John Lutz', 948.26), ('Nichole Rasmussen', 1986.2549999999999), ('Debra Grant', 2689.67), ('Michael Green', 4970.44), ('Miss Alexandra Hess', 2656.2700000000004), ('Benjamin Cooley', 3144.45), ('William Nixon', 469.3), ('Timothy Ryan', 3761.73), ('Matthew Schultz', 2923.6800000000003), ('Angela Hampton', 4638.0), ('Christine Wood DDS', 2439.925), ('Tonya Whitaker', 3019.295), ('Rachel Diaz', 4651.47), ('Sean Torres', 1629.92), ('Jack Waters', 1629.846666666667), ('Jennifer Hernandez', 2741.1), ('Hailey Ramirez', 1160.2), ('Katherine Burch', 612.7), ('Justin Carter', 4532.41), ('Jonathan Warren MD', 1731.25), ('Jonathan Hansen', 4502.37), ('Timothy Hunter', 4713.3), ('Julie Maxwell', 569.21), ('Glenn Daugherty', 3633.23), ('Kimberly Smith', 3989.67), ('Warren Lee', 4785.75), ('Jeremy Stevens', 2016.8500000000001), ('Christina Garza', 1204.16), ('Allen Fitzgerald', 3212.12)]"
