Number of correct output: 26; Accuracy: 52.0%
ANALYSE V7 RESULTS
 
Index: 5
Question: From the following table, write a SQL query to find the details of those salespeople whose commissions range from 0.10 to0.12. Return salesman_id, name, city, and commission.
Target query: SELECT salesman_id, name, city, commission FROM salesman WHERE (commission > 0.10 AND commission < 0.12);
Predicted query: SELECT salesman_id, name, city, commission  FROM salesman  WHERE commission BETWEEN 0.10 AND 0.12;
Target output: [(5005, 'Pit Alex', 'London', 0.11), (5008, 'Joseph Ferguson', 'California', 0.11), (5010, 'James Conway', 'Moscow', 0.11), (5017, 'Adrienne Moore', 'Rome', 0.11), (5021, 'Edward Lopez', 'Rome', 0.11), (5022, 'Benjamin Cooley', 'Rome', 0.11), (5030, 'Tonya Whitaker', 'Moscow', 0.11), (5032, 'Sean Torres', 'Berlin', 0.11), (5037, 'Elizabeth Estes', 'Moscow', 0.11), (5038, 'Patrick Delgado', 'San Jose', 0.11), (5039, 'Michelle Williams', 'San Jose', 0.11), (5040, 'Katherine Burch', 'Berlin', 0.11), (5042, 'Jonathan Warren MD', 'California', 0.11), (5046, 'Glenn Daugherty', 'California', 0.11), (5047, 'Kimberly Smith', 'London', 0.11)]
Predicted output: [(5005, 'Pit Alex', 'London', 0.11), (5003, 'Lauson Hen', 'San Jose', 0.12), (5008, 'Joseph Ferguson', 'California', 0.11), (5010, 'James Conway', 'Moscow', 0.11), (5011, 'John Lutz', 'Rome', 0.12), (5012, 'Nicole Hardy', 'Rome', 0.1), (5013, 'Nichole Rasmussen', 'Paris', 0.12), (5015, 'Debra Grant', 'Rome', 0.12), (5016, 'Michael Green', 'Berlin', 0.12), (5017, 'Adrienne Moore', 'Rome', 0.11), (5021, 'Edward Lopez', 'Rome', 0.11), (5022, 'Benjamin Cooley', 'Rome', 0.11), (5023, 'William Nixon', 'Paris', 0.1), (5025, 'Timothy Ryan', 'London', 0.12), (5030, 'Tonya Whitaker', 'Moscow', 0.11), (5031, 'Rachel Diaz', 'Berlin', 0.1), (5032, 'Sean Torres', 'Berlin', 0.11), (5037, 'Elizabeth Estes', 'Moscow', 0.11), (5038, 'Patrick Delgado', 'San Jose', 0.11), (5039, 'Michelle Williams', 'San Jose', 0.11), (5040, 'Katherine Burch', 'Berlin', 0.11), (5042, 'Jonathan Warren MD', 'California', 0.11), (5043, 'Jonathan Hansen', 'Berlin', 0.12), (5044, 'Timothy Hunter', 'Rome', 0.12), (5046, 'Glenn Daugherty', 'California', 0.11), (5047, 'Kimberly Smith', 'London', 0.11), (5049, 'Warren Lee', 'California', 0.1), (5050, 'Carrie Hall', 'Berlin', 0.12), (5051, 'Wayne Jenkins', 'Berlin', 0.12), (5056, 'Corey Jefferson', 'Berlin', 0.12), (5057, 'Allen Fitzgerald', 'Moscow', 0.1)]
Sorted and distinct target output: ["(5005, 'Pit Alex', 'London', 0.11)", "(5008, 'Joseph Ferguson', 'California', 0.11)", "(5010, 'James Conway', 'Moscow', 0.11)", "(5017, 'Adrienne Moore', 'Rome', 0.11)", "(5021, 'Edward Lopez', 'Rome', 0.11)", "(5022, 'Benjamin Cooley', 'Rome', 0.11)", "(5030, 'Tonya Whitaker', 'Moscow', 0.11)", "(5032, 'Sean Torres', 'Berlin', 0.11)", "(5037, 'Elizabeth Estes', 'Moscow', 0.11)", "(5038, 'Patrick Delgado', 'San Jose', 0.11)", "(5039, 'Michelle Williams', 'San Jose', 0.11)", "(5040, 'Katherine Burch', 'Berlin', 0.11)", "(5042, 'Jonathan Warren MD', 'California', 0.11)", "(5046, 'Glenn Daugherty', 'California', 0.11)", "(5047, 'Kimberly Smith', 'London', 0.11)"]
Sorted and distinct predicted output: ["(5003, 'Lauson Hen', 'San Jose', 0.12)", "(5005, 'Pit Alex', 'London', 0.11)", "(5008, 'Joseph Ferguson', 'California', 0.11)", "(5010, 'James Conway', 'Moscow', 0.11)", "(5011, 'John Lutz', 'Rome', 0.12)", "(5012, 'Nicole Hardy', 'Rome', 0.1)", "(5013, 'Nichole Rasmussen', 'Paris', 0.12)", "(5015, 'Debra Grant', 'Rome', 0.12)", "(5016, 'Michael Green', 'Berlin', 0.12)", "(5017, 'Adrienne Moore', 'Rome', 0.11)", "(5021, 'Edward Lopez', 'Rome', 0.11)", "(5022, 'Benjamin Cooley', 'Rome', 0.11)", "(5023, 'William Nixon', 'Paris', 0.1)", "(5025, 'Timothy Ryan', 'London', 0.12)", "(5030, 'Tonya Whitaker', 'Moscow', 0.11)", "(5031, 'Rachel Diaz', 'Berlin', 0.1)", "(5032, 'Sean Torres', 'Berlin', 0.11)", "(5037, 'Elizabeth Estes', 'Moscow', 0.11)", "(5038, 'Patrick Delgado', 'San Jose', 0.11)", "(5039, 'Michelle Williams', 'San Jose', 0.11)", "(5040, 'Katherine Burch', 'Berlin', 0.11)", "(5042, 'Jonathan Warren MD', 'California', 0.11)", "(5043, 'Jonathan Hansen', 'Berlin', 0.12)", "(5044, 'Timothy Hunter', 'Rome', 0.12)", "(5046, 'Glenn Daugherty', 'California', 0.11)", "(5047, 'Kimberly Smith', 'London', 0.11)", "(5049, 'Warren Lee', 'California', 0.1)", "(5050, 'Carrie Hall', 'Berlin', 0.12)", "(5051, 'Wayne Jenkins', 'Berlin', 0.12)", "(5056, 'Corey Jefferson', 'Berlin', 0.12)", "(5057, 'Allen Fitzgerald', 'Moscow', 0.1)"]
The answer is WRONG.
Number of correct output: 26; Accuracy: 52.0%
 
Index: 8
Question: From the following table, write a SQL query to retrieve the details of the salespeople whose names begin with any letter between 'A' and 'L' (not inclusive). Return salesman_id, name, city, commission.
Target query: SELECT * FROM salesman WHERE name BETWEEN 'A' AND 'L';
Predicted query: SELECT salesman_id, name, city, commission FROM salesman WHERE name LIKE '[A-K]%'
Target output: [(5001, 'James Hoog', 'New York', 0.15), (5008, 'Joseph Ferguson', 'California', 0.11), (5009, 'Cindy Roman', 'Paris', 0.13), (5010, 'James Conway', 'Moscow', 0.11), (5011, 'John Lutz', 'Rome', 0.12), (5014, 'Jesse Wilson DDS', 'London', 0.13), (5015, 'Debra Grant', 'Rome', 0.12), (5017, 'Adrienne Moore', 'Rome', 0.11), (5020, 'Drew Skinner', 'New York', 0.15), (5021, 'Edward Lopez', 'Rome', 0.11), (5022, 'Benjamin Cooley', 'Rome', 0.11), (5024, 'Brandon Warner', 'California', 0.14), (5027, 'Angela Hampton', 'Rome', 0.13), (5028, 'Kelly Moore', 'Moscow', 0.13), (5029, 'Christine Wood DDS', 'California', 0.15), (5033, 'Jack Waters', 'Paris', 0.15), (5034, 'Kelly Abbott', 'Berlin', 0.14), (5035, 'Jennifer Hernandez', 'London', 0.13), (5036, 'Hailey Ramirez', 'London', 0.13), (5037, 'Elizabeth Estes', 'Moscow', 0.11), (5040, 'Katherine Burch', 'Berlin', 0.11), (5041, 'Justin Carter', 'New York', 0.15), (5042, 'Jonathan Warren MD', 'California', 0.11), (5043, 'Jonathan Hansen', 'Berlin', 0.12), (5045, 'Julie Maxwell', 'Rome', 0.13), (5046, 'Glenn Daugherty', 'California', 0.11), (5047, 'Kimberly Smith', 'London', 0.11), (5050, 'Carrie Hall', 'Berlin', 0.12), (5052, 'Jeremy Stevens', 'San Jose', 0.14), (5053, 'Krista Murphy', 'Moscow', 0.15), (5054, 'Christina Garza', 'California', 0.13), (5055, 'Brian White', 'Rome', 0.13), (5056, 'Corey Jefferson', 'Berlin', 0.12), (5057, 'Allen Fitzgerald', 'Moscow', 0.1)]
Predicted output: 0
 
Index: 15
Question: From the following table, write a SQL query that counts the unique orders and the highest purchase amount for each customer. Sort the result-set in descending order on 2nd field. Return customer ID, number of distinct orders and highest purchase amount by each customer.
Target query: SELECT customer_id, COUNT(DISTINCT ord_no), MAX(purch_amt) FROM orders GROUP BY customer_id ORDER BY 2 DESC;
Predicted query: SELECT customer_id, COUNT(DISTINCT ord_no) AS unique_orders, MAX(purch_amt) AS highest_purchase_amount FROM orders GROUP BY customer_id ORDER BY highest_purchase_amount DESC;
Target output: [(3037, 4, 4824.13), (3009, 4, 2480.4), (3005, 4, 2608.07), (3055, 3, 3989.67), (3004, 3, 3761.73), (3003, 3, 1895.55), (3002, 3, 5760), (3059, 2, 4357.38), (3057, 2, 4945.56), (3046, 2, 3753.3), (3042, 2, 4638), (3033, 2, 4532.41), (3026, 2, 4205.52), (3015, 2, 4502.37), (3011, 2, 4379.4), (3008, 2, 2771.11), (3058, 1, 1610.05), (3054, 1, 2213.66), (3053, 1, 4785.75), (3050, 1, 1173.26), (3049, 1, 3212.12), (3047, 1, 4970.44), (3045, 1, 1204.16), (3043, 1, 3633.23), (3040, 1, 612.7), (3036, 1, 1663.5), (3035, 1, 2085.39), (3030, 1, 1107.02), (3023, 1, 1887.12), (3020, 1, 3824.93), (3019, 1, 1313.05), (3018, 1, 4713.3), (3014, 1, 776.19), (3012, 1, 469.3), (3007, 1, 2400.6), (3001, 1, 270.65)]
Predicted output: [(3002, 3, 5760), (3047, 1, 4970.44), (3057, 2, 4945.56), (3037, 4, 4824.13), (3053, 1, 4785.75), (3018, 1, 4713.3), (3042, 2, 4638), (3033, 2, 4532.41), (3015, 2, 4502.37), (3011, 2, 4379.4), (3059, 2, 4357.38), (3026, 2, 4205.52), (3055, 3, 3989.67), (3020, 1, 3824.93), (3004, 3, 3761.73), (3046, 2, 3753.3), (3043, 1, 3633.23), (3049, 1, 3212.12), (3008, 2, 2771.11), (3005, 4, 2608.07), (3009, 4, 2480.4), (3007, 1, 2400.6), (3054, 1, 2213.66), (3035, 1, 2085.39), (3003, 3, 1895.55), (3023, 1, 1887.12), (3036, 1, 1663.5), (3058, 1, 1610.05), (3019, 1, 1313.05), (3045, 1, 1204.16), (3050, 1, 1173.26), (3030, 1, 1107.02), (3014, 1, 776.19), (3040, 1, 612.7), (3012, 1, 469.3), (3001, 1, 270.65)]
Sorted and distinct target output: ['(3001, 1, 270.65)', '(3002, 3, 5760)', '(3003, 3, 1895.55)', '(3004, 3, 3761.73)', '(3005, 4, 2608.07)', '(3007, 1, 2400.6)', '(3008, 2, 2771.11)', '(3009, 4, 2480.4)', '(3011, 2, 4379.4)', '(3012, 1, 469.3)', '(3014, 1, 776.19)', '(3015, 2, 4502.37)', '(3018, 1, 4713.3)', '(3019, 1, 1313.05)', '(3020, 1, 3824.93)', '(3023, 1, 1887.12)', '(3026, 2, 4205.52)', '(3030, 1, 1107.02)', '(3033, 2, 4532.41)', '(3035, 1, 2085.39)', '(3036, 1, 1663.5)', '(3037, 4, 4824.13)', '(3040, 1, 612.7)', '(3042, 2, 4638)', '(3043, 1, 3633.23)', '(3045, 1, 1204.16)', '(3046, 2, 3753.3)', '(3047, 1, 4970.44)', '(3049, 1, 3212.12)', '(3050, 1, 1173.26)', '(3053, 1, 4785.75)', '(3054, 1, 2213.66)', '(3055, 3, 3989.67)', '(3057, 2, 4945.56)', '(3058, 1, 1610.05)', '(3059, 2, 4357.38)']
Sorted and distinct predicted output: ['(3001, 1, 270.65)', '(3002, 3, 5760)', '(3003, 3, 1895.55)', '(3004, 3, 3761.73)', '(3005, 4, 2608.07)', '(3007, 1, 2400.6)', '(3008, 2, 2771.11)', '(3009, 4, 2480.4)', '(3011, 2, 4379.4)', '(3012, 1, 469.3)', '(3014, 1, 776.19)', '(3015, 2, 4502.37)', '(3018, 1, 4713.3)', '(3019, 1, 1313.05)', '(3020, 1, 3824.93)', '(3023, 1, 1887.12)', '(3026, 2, 4205.52)', '(3030, 1, 1107.02)', '(3033, 2, 4532.41)', '(3035, 1, 2085.39)', '(3036, 1, 1663.5)', '(3037, 4, 4824.13)', '(3040, 1, 612.7)', '(3042, 2, 4638)', '(3043, 1, 3633.23)', '(3045, 1, 1204.16)', '(3046, 2, 3753.3)', '(3047, 1, 4970.44)', '(3049, 1, 3212.12)', '(3050, 1, 1173.26)', '(3053, 1, 4785.75)', '(3054, 1, 2213.66)', '(3055, 3, 3989.67)', '(3057, 2, 4945.56)', '(3058, 1, 1610.05)', '(3059, 2, 4357.38)']
The answer is CORRECT.
Number of correct output: 27; Accuracy: 54.0%
 
Index: 16
Question: From the following tables, write a SQL query to find the salespeople and customers who live in the same city. Return customer name, salesperson name and salesperson city.
Target query: SELECT customer.cust_name, salesman.name, salesman.city FROM salesman, customer WHERE salesman.city = customer.city;
Predicted query: SELECT c.cust_name AS customer_name, s.name AS salesman_name, s.city AS salesman_city FROM customer c JOIN salesman s ON c.salesman_id = s.salesman_id WHERE c.city = s.city;
Target output: [('Amy Allen', 'James Hoog', 'New York'), ('Angela Alvarez', 'James Hoog', 'New York'), ('Brad Davis', 'James Hoog', 'New York'), ('Hannah Garcia', 'James Hoog', 'New York'), ('Karen Hudson', 'James Hoog', 'New York'), ('Kathleen Holmes', 'James Hoog', 'New York'), ('Nick Rimando', 'James Hoog', 'New York'), ('Sarah Barrera', 'James Hoog', 'New York'), ('Cody Fields', 'Nail Knite', 'Paris'), ('David Perry', 'Nail Knite', 'Paris'), ('Fabian Johnson', 'Nail Knite', 'Paris'), ('Holly Hernandez', 'Nail Knite', 'Paris'), ('Holly Thompson', 'Nail Knite', 'Paris'), ('Jonathon Medina', 'Nail Knite', 'Paris'), ('Larry Martin', 'Nail Knite', 'Paris'), ('Leslie Jensen', 'Nail Knite', 'Paris'), ('Matthew Johnson', 'Nail Knite', 'Paris'), ('Sandra Young', 'Nail Knite', 'Paris'), ('Brad Guzan', 'Pit Alex', 'London'), ('Christopher Marsh', 'Pit Alex', 'London'), ('Dr. John Evans', 'Pit Alex', 'London'), ('Dr. Tracy Pitts', 'Pit Alex', 'London'), ('Jessica Obrien', 'Pit Alex', 'London'), ('Julia Shaffer', 'Pit Alex', 'London'), ('Julian Green', 'Pit Alex', 'London'), ('Kevin Nguyen', 'Pit Alex', 'London'), ('Mary Jacobs', 'Pit Alex', 'London'), ('Michael Foster', 'Pit Alex', 'London'), ('Michael Gordon', 'Pit Alex', 'London'), ('Samantha Park', 'Pit Alex', 'London'), ('Sierra Perry', 'Pit Alex', 'London'), ('Stephen Hurley', 'Pit Alex', 'London'), ('Tiffany Hernandez', 'Pit Alex', 'London'), ('Cody Fields', 'Mc Lyon', 'Paris'), ('David Perry', 'Mc Lyon', 'Paris'), ('Fabian Johnson', 'Mc Lyon', 'Paris'), ('Holly Hernandez', 'Mc Lyon', 'Paris'), ('Holly Thompson', 'Mc Lyon', 'Paris'), ('Jonathon Medina', 'Mc Lyon', 'Paris'), ('Larry Martin', 'Mc Lyon', 'Paris'), ('Leslie Jensen', 'Mc Lyon', 'Paris'), ('Matthew Johnson', 'Mc Lyon', 'Paris'), ('Sandra Young', 'Mc Lyon', 'Paris'), ('Brianna Schmidt', 'Paul Adam', 'Rome'), ('Christy Quinn', 'Paul Adam', 'Rome'), ('Devin Powers', 'Lauson Hen', 'San Jose'), ('Frank Hines', 'Lauson Hen', 'San Jose'), ('Shelby Newman', 'Lauson Hen', 'San Jose'), ('Stephanie Carroll', 'Lauson Hen', 'San Jose'), ('Bryan Tanner', 'Joseph Ferguson', 'California'), ('Cory Williams', 'Joseph Ferguson', 'California'), ('Donald Wilson', 'Joseph Ferguson', 'California'), ('Graham Zusi', 'Joseph Ferguson', 'California'), ('Ricky Carr', 'Joseph Ferguson', 'California'), ('Steven Scott', 'Joseph Ferguson', 'California'), ('Wayne White', 'Joseph Ferguson', 'California'), ('Cody Fields', 'Cindy Roman', 'Paris'), ('David Perry', 'Cindy Roman', 'Paris'), ('Fabian Johnson', 'Cindy Roman', 'Paris'), ('Holly Hernandez', 'Cindy Roman', 'Paris'), ('Holly Thompson', 'Cindy Roman', 'Paris'), ('Jonathon Medina', 'Cindy Roman', 'Paris'), ('Larry Martin', 'Cindy Roman', 'Paris'), ('Leslie Jensen', 'Cindy Roman', 'Paris'), ('Matthew Johnson', 'Cindy Roman', 'Paris'), ('Sandra Young', 'Cindy Roman', 'Paris'), ('Jose Mckay', 'James Conway', 'Moscow'), ('Jozy Altidor', 'James Conway', 'Moscow'), ('Sandra Nixon', 'James Conway', 'Moscow'), ('Sandy Burgess', 'James Conway', 'Moscow'), ('Terry Perez', 'James Conway', 'Moscow'), ('Tracey Smith', 'James Conway', 'Moscow'), ('Brianna Schmidt', 'John Lutz', 'Rome'), ('Christy Quinn', 'John Lutz', 'Rome'), ('Brianna Schmidt', 'Nicole Hardy', 'Rome'), ('Christy Quinn', 'Nicole Hardy', 'Rome'), ('Cody Fields', 'Nichole Rasmussen', 'Paris'), ('David Perry', 'Nichole Rasmussen', 'Paris'), ('Fabian Johnson', 'Nichole Rasmussen', 'Paris'), ('Holly Hernandez', 'Nichole Rasmussen', 'Paris'), ('Holly Thompson', 'Nichole Rasmussen', 'Paris'), ('Jonathon Medina', 'Nichole Rasmussen', 'Paris'), ('Larry Martin', 'Nichole Rasmussen', 'Paris'), ('Leslie Jensen', 'Nichole Rasmussen', 'Paris'), ('Matthew Johnson', 'Nichole Rasmussen', 'Paris'), ('Sandra Young', 'Nichole Rasmussen', 'Paris'), ('Brad Guzan', 'Jesse Wilson DDS', 'London'), ('Christopher Marsh', 'Jesse Wilson DDS', 'London'), ('Dr. John Evans', 'Jesse Wilson DDS', 'London'), ('Dr. Tracy Pitts', 'Jesse Wilson DDS', 'London'), ('Jessica Obrien', 'Jesse Wilson DDS', 'London'), ('Julia Shaffer', 'Jesse Wilson DDS', 'London'), ('Julian Green', 'Jesse Wilson DDS', 'London'), ('Kevin Nguyen', 'Jesse Wilson DDS', 'London'), ('Mary Jacobs', 'Jesse Wilson DDS', 'London'), ('Michael Foster', 'Jesse Wilson DDS', 'London'), ('Michael Gordon', 'Jesse Wilson DDS', 'London'), ('Samantha Park', 'Jesse Wilson DDS', 'London'), ('Sierra Perry', 'Jesse Wilson DDS', 'London'), ('Stephen Hurley', 'Jesse Wilson DDS', 'London'), ('Tiffany Hernandez', 'Jesse Wilson DDS', 'London'), ('Brianna Schmidt', 'Debra Grant', 'Rome'), ('Christy Quinn', 'Debra Grant', 'Rome'), ('Chris Thomas', 'Michael Green', 'Berlin'), ('Dr. Crystal Baker MD', 'Michael Green', 'Berlin'), ('Geoff Cameron', 'Michael Green', 'Berlin'), ('Gerald Walker', 'Michael Green', 'Berlin'), ('Steven Williams', 'Michael Green', 'Berlin'), ('William Dawson', 'Michael Green', 'Berlin'), ('Brianna Schmidt', 'Adrienne Moore', 'Rome'), ('Christy Quinn', 'Adrienne Moore', 'Rome'), ('Chris Thomas', 'Tommy Moore', 'Berlin'), ('Dr. Crystal Baker MD', 'Tommy Moore', 'Berlin'), ('Geoff Cameron', 'Tommy Moore', 'Berlin'), ('Gerald Walker', 'Tommy Moore', 'Berlin'), ('Steven Williams', 'Tommy Moore', 'Berlin'), ('William Dawson', 'Tommy Moore', 'Berlin'), ('Jose Mckay', 'Miss Alexandra Hess', 'Moscow'), ('Jozy Altidor', 'Miss Alexandra Hess', 'Moscow'), ('Sandra Nixon', 'Miss Alexandra Hess', 'Moscow'), ('Sandy Burgess', 'Miss Alexandra Hess', 'Moscow'), ('Terry Perez', 'Miss Alexandra Hess', 'Moscow'), ('Tracey Smith', 'Miss Alexandra Hess', 'Moscow'), ('Amy Allen', 'Drew Skinner', 'New York'), ('Angela Alvarez', 'Drew Skinner', 'New York'), ('Brad Davis', 'Drew Skinner', 'New York'), ('Hannah Garcia', 'Drew Skinner', 'New York'), ('Karen Hudson', 'Drew Skinner', 'New York'), ('Kathleen Holmes', 'Drew Skinner', 'New York'), ('Nick Rimando', 'Drew Skinner', 'New York'), ('Sarah Barrera', 'Drew Skinner', 'New York'), ('Brianna Schmidt', 'Edward Lopez', 'Rome'), ('Christy Quinn', 'Edward Lopez', 'Rome'), ('Brianna Schmidt', 'Benjamin Cooley', 'Rome'), ('Christy Quinn', 'Benjamin Cooley', 'Rome'), ('Cody Fields', 'William Nixon', 'Paris'), ('David Perry', 'William Nixon', 'Paris'), ('Fabian Johnson', 'William Nixon', 'Paris'), ('Holly Hernandez', 'William Nixon', 'Paris'), ('Holly Thompson', 'William Nixon', 'Paris'), ('Jonathon Medina', 'William Nixon', 'Paris'), ('Larry Martin', 'William Nixon', 'Paris'), ('Leslie Jensen', 'William Nixon', 'Paris'), ('Matthew Johnson', 'William Nixon', 'Paris'), ('Sandra Young', 'William Nixon', 'Paris'), ('Bryan Tanner', 'Brandon Warner', 'California'), ('Cory Williams', 'Brandon Warner', 'California'), ('Donald Wilson', 'Brandon Warner', 'California'), ('Graham Zusi', 'Brandon Warner', 'California'), ('Ricky Carr', 'Brandon Warner', 'California'), ('Steven Scott', 'Brandon Warner', 'California'), ('Wayne White', 'Brandon Warner', 'California'), ('Brad Guzan', 'Timothy Ryan', 'London'), ('Christopher Marsh', 'Timothy Ryan', 'London'), ('Dr. John Evans', 'Timothy Ryan', 'London'), ('Dr. Tracy Pitts', 'Timothy Ryan', 'London'), ('Jessica Obrien', 'Timothy Ryan', 'London'), ('Julia Shaffer', 'Timothy Ryan', 'London'), ('Julian Green', 'Timothy Ryan', 'London'), ('Kevin Nguyen', 'Timothy Ryan', 'London'), ('Mary Jacobs', 'Timothy Ryan', 'London'), ('Michael Foster', 'Timothy Ryan', 'London'), ('Michael Gordon', 'Timothy Ryan', 'London'), ('Samantha Park', 'Timothy Ryan', 'London'), ('Sierra Perry', 'Timothy Ryan', 'London'), ('Stephen Hurley', 'Timothy Ryan', 'London'), ('Tiffany Hernandez', 'Timothy Ryan', 'London'), ('Amy Allen', 'Matthew Schultz', 'New York'), ('Angela Alvarez', 'Matthew Schultz', 'New York'), ('Brad Davis', 'Matthew Schultz', 'New York'), ('Hannah Garcia', 'Matthew Schultz', 'New York'), ('Karen Hudson', 'Matthew Schultz', 'New York'), ('Kathleen Holmes', 'Matthew Schultz', 'New York'), ('Nick Rimando', 'Matthew Schultz', 'New York'), ('Sarah Barrera', 'Matthew Schultz', 'New York'), ('Brianna Schmidt', 'Angela Hampton', 'Rome'), ('Christy Quinn', 'Angela Hampton', 'Rome'), ('Jose Mckay', 'Kelly Moore', 'Moscow'), ('Jozy Altidor', 'Kelly Moore', 'Moscow'), ('Sandra Nixon', 'Kelly Moore', 'Moscow'), ('Sandy Burgess', 'Kelly Moore', 'Moscow'), ('Terry Perez', 'Kelly Moore', 'Moscow'), ('Tracey Smith', 'Kelly Moore', 'Moscow'), ('Bryan Tanner', 'Christine Wood DDS', 'California'), ('Cory Williams', 'Christine Wood DDS', 'California'), ('Donald Wilson', 'Christine Wood DDS', 'California'), ('Graham Zusi', 'Christine Wood DDS', 'California'), ('Ricky Carr', 'Christine Wood DDS', 'California'), ('Steven Scott', 'Christine Wood DDS', 'California'), ('Wayne White', 'Christine Wood DDS', 'California'), ('Jose Mckay', 'Tonya Whitaker', 'Moscow'), ('Jozy Altidor', 'Tonya Whitaker', 'Moscow'), ('Sandra Nixon', 'Tonya Whitaker', 'Moscow'), ('Sandy Burgess', 'Tonya Whitaker', 'Moscow'), ('Terry Perez', 'Tonya Whitaker', 'Moscow'), ('Tracey Smith', 'Tonya Whitaker', 'Moscow'), ('Chris Thomas', 'Rachel Diaz', 'Berlin'), ('Dr. Crystal Baker MD', 'Rachel Diaz', 'Berlin'), ('Geoff Cameron', 'Rachel Diaz', 'Berlin'), ('Gerald Walker', 'Rachel Diaz', 'Berlin'), ('Steven Williams', 'Rachel Diaz', 'Berlin'), ('William Dawson', 'Rachel Diaz', 'Berlin'), ('Chris Thomas', 'Sean Torres', 'Berlin'), ('Dr. Crystal Baker MD', 'Sean Torres', 'Berlin'), ('Geoff Cameron', 'Sean Torres', 'Berlin'), ('Gerald Walker', 'Sean Torres', 'Berlin'), ('Steven Williams', 'Sean Torres', 'Berlin'), ('William Dawson', 'Sean Torres', 'Berlin'), ('Cody Fields', 'Jack Waters', 'Paris'), ('David Perry', 'Jack Waters', 'Paris'), ('Fabian Johnson', 'Jack Waters', 'Paris'), ('Holly Hernandez', 'Jack Waters', 'Paris'), ('Holly Thompson', 'Jack Waters', 'Paris'), ('Jonathon Medina', 'Jack Waters', 'Paris'), ('Larry Martin', 'Jack Waters', 'Paris'), ('Leslie Jensen', 'Jack Waters', 'Paris'), ('Matthew Johnson', 'Jack Waters', 'Paris'), ('Sandra Young', 'Jack Waters', 'Paris'), ('Chris Thomas', 'Kelly Abbott', 'Berlin'), ('Dr. Crystal Baker MD', 'Kelly Abbott', 'Berlin'), ('Geoff Cameron', 'Kelly Abbott', 'Berlin'), ('Gerald Walker', 'Kelly Abbott', 'Berlin'), ('Steven Williams', 'Kelly Abbott', 'Berlin'), ('William Dawson', 'Kelly Abbott', 'Berlin'), ('Brad Guzan', 'Jennifer Hernandez', 'London'), ('Christopher Marsh', 'Jennifer Hernandez', 'London'), ('Dr. John Evans', 'Jennifer Hernandez', 'London'), ('Dr. Tracy Pitts', 'Jennifer Hernandez', 'London'), ('Jessica Obrien', 'Jennifer Hernandez', 'London'), ('Julia Shaffer', 'Jennifer Hernandez', 'London'), ('Julian Green', 'Jennifer Hernandez', 'London'), ('Kevin Nguyen', 'Jennifer Hernandez', 'London'), ('Mary Jacobs', 'Jennifer Hernandez', 'London'), ('Michael Foster', 'Jennifer Hernandez', 'London'), ('Michael Gordon', 'Jennifer Hernandez', 'London'), ('Samantha Park', 'Jennifer Hernandez', 'London'), ('Sierra Perry', 'Jennifer Hernandez', 'London'), ('Stephen Hurley', 'Jennifer Hernandez', 'London'), ('Tiffany Hernandez', 'Jennifer Hernandez', 'London'), ('Brad Guzan', 'Hailey Ramirez', 'London'), ('Christopher Marsh', 'Hailey Ramirez', 'London'), ('Dr. John Evans', 'Hailey Ramirez', 'London'), ('Dr. Tracy Pitts', 'Hailey Ramirez', 'London'), ('Jessica Obrien', 'Hailey Ramirez', 'London'), ('Julia Shaffer', 'Hailey Ramirez', 'London'), ('Julian Green', 'Hailey Ramirez', 'London'), ('Kevin Nguyen', 'Hailey Ramirez', 'London'), ('Mary Jacobs', 'Hailey Ramirez', 'London'), ('Michael Foster', 'Hailey Ramirez', 'London'), ('Michael Gordon', 'Hailey Ramirez', 'London'), ('Samantha Park', 'Hailey Ramirez', 'London'), ('Sierra Perry', 'Hailey Ramirez', 'London'), ('Stephen Hurley', 'Hailey Ramirez', 'London'), ('Tiffany Hernandez', 'Hailey Ramirez', 'London'), ('Jose Mckay', 'Elizabeth Estes', 'Moscow'), ('Jozy Altidor', 'Elizabeth Estes', 'Moscow'), ('Sandra Nixon', 'Elizabeth Estes', 'Moscow'), ('Sandy Burgess', 'Elizabeth Estes', 'Moscow'), ('Terry Perez', 'Elizabeth Estes', 'Moscow'), ('Tracey Smith', 'Elizabeth Estes', 'Moscow'), ('Devin Powers', 'Patrick Delgado', 'San Jose'), ('Frank Hines', 'Patrick Delgado', 'San Jose'), ('Shelby Newman', 'Patrick Delgado', 'San Jose'), ('Stephanie Carroll', 'Patrick Delgado', 'San Jose'), ('Devin Powers', 'Michelle Williams', 'San Jose'), ('Frank Hines', 'Michelle Williams', 'San Jose'), ('Shelby Newman', 'Michelle Williams', 'San Jose'), ('Stephanie Carroll', 'Michelle Williams', 'San Jose'), ('Chris Thomas', 'Katherine Burch', 'Berlin'), ('Dr. Crystal Baker MD', 'Katherine Burch', 'Berlin'), ('Geoff Cameron', 'Katherine Burch', 'Berlin'), ('Gerald Walker', 'Katherine Burch', 'Berlin'), ('Steven Williams', 'Katherine Burch', 'Berlin'), ('William Dawson', 'Katherine Burch', 'Berlin'), ('Amy Allen', 'Justin Carter', 'New York'), ('Angela Alvarez', 'Justin Carter', 'New York'), ('Brad Davis', 'Justin Carter', 'New York'), ('Hannah Garcia', 'Justin Carter', 'New York'), ('Karen Hudson', 'Justin Carter', 'New York'), ('Kathleen Holmes', 'Justin Carter', 'New York'), ('Nick Rimando', 'Justin Carter', 'New York'), ('Sarah Barrera', 'Justin Carter', 'New York'), ('Bryan Tanner', 'Jonathan Warren MD', 'California'), ('Cory Williams', 'Jonathan Warren MD', 'California'), ('Donald Wilson', 'Jonathan Warren MD', 'California'), ('Graham Zusi', 'Jonathan Warren MD', 'California'), ('Ricky Carr', 'Jonathan Warren MD', 'California'), ('Steven Scott', 'Jonathan Warren MD', 'California'), ('Wayne White', 'Jonathan Warren MD', 'California'), ('Chris Thomas', 'Jonathan Hansen', 'Berlin'), ('Dr. Crystal Baker MD', 'Jonathan Hansen', 'Berlin'), ('Geoff Cameron', 'Jonathan Hansen', 'Berlin'), ('Gerald Walker', 'Jonathan Hansen', 'Berlin'), ('Steven Williams', 'Jonathan Hansen', 'Berlin'), ('William Dawson', 'Jonathan Hansen', 'Berlin'), ('Brianna Schmidt', 'Timothy Hunter', 'Rome'), ('Christy Quinn', 'Timothy Hunter', 'Rome'), ('Brianna Schmidt', 'Julie Maxwell', 'Rome'), ('Christy Quinn', 'Julie Maxwell', 'Rome'), ('Bryan Tanner', 'Glenn Daugherty', 'California'), ('Cory Williams', 'Glenn Daugherty', 'California'), ('Donald Wilson', 'Glenn Daugherty', 'California'), ('Graham Zusi', 'Glenn Daugherty', 'California'), ('Ricky Carr', 'Glenn Daugherty', 'California'), ('Steven Scott', 'Glenn Daugherty', 'California'), ('Wayne White', 'Glenn Daugherty', 'California'), ('Brad Guzan', 'Kimberly Smith', 'London'), ('Christopher Marsh', 'Kimberly Smith', 'London'), ('Dr. John Evans', 'Kimberly Smith', 'London'), ('Dr. Tracy Pitts', 'Kimberly Smith', 'London'), ('Jessica Obrien', 'Kimberly Smith', 'London'), ('Julia Shaffer', 'Kimberly Smith', 'London'), ('Julian Green', 'Kimberly Smith', 'London'), ('Kevin Nguyen', 'Kimberly Smith', 'London'), ('Mary Jacobs', 'Kimberly Smith', 'London'), ('Michael Foster', 'Kimberly Smith', 'London'), ('Michael Gordon', 'Kimberly Smith', 'London'), ('Samantha Park', 'Kimberly Smith', 'London'), ('Sierra Perry', 'Kimberly Smith', 'London'), ('Stephen Hurley', 'Kimberly Smith', 'London'), ('Tiffany Hernandez', 'Kimberly Smith', 'London'), ('Brad Guzan', 'Matthew Walter', 'London'), ('Christopher Marsh', 'Matthew Walter', 'London'), ('Dr. John Evans', 'Matthew Walter', 'London'), ('Dr. Tracy Pitts', 'Matthew Walter', 'London'), ('Jessica Obrien', 'Matthew Walter', 'London'), ('Julia Shaffer', 'Matthew Walter', 'London'), ('Julian Green', 'Matthew Walter', 'London'), ('Kevin Nguyen', 'Matthew Walter', 'London'), ('Mary Jacobs', 'Matthew Walter', 'London'), ('Michael Foster', 'Matthew Walter', 'London'), ('Michael Gordon', 'Matthew Walter', 'London'), ('Samantha Park', 'Matthew Walter', 'London'), ('Sierra Perry', 'Matthew Walter', 'London'), ('Stephen Hurley', 'Matthew Walter', 'London'), ('Tiffany Hernandez', 'Matthew Walter', 'London'), ('Bryan Tanner', 'Warren Lee', 'California'), ('Cory Williams', 'Warren Lee', 'California'), ('Donald Wilson', 'Warren Lee', 'California'), ('Graham Zusi', 'Warren Lee', 'California'), ('Ricky Carr', 'Warren Lee', 'California'), ('Steven Scott', 'Warren Lee', 'California'), ('Wayne White', 'Warren Lee', 'California'), ('Chris Thomas', 'Carrie Hall', 'Berlin'), ('Dr. Crystal Baker MD', 'Carrie Hall', 'Berlin'), ('Geoff Cameron', 'Carrie Hall', 'Berlin'), ('Gerald Walker', 'Carrie Hall', 'Berlin'), ('Steven Williams', 'Carrie Hall', 'Berlin'), ('William Dawson', 'Carrie Hall', 'Berlin'), ('Chris Thomas', 'Wayne Jenkins', 'Berlin'), ('Dr. Crystal Baker MD', 'Wayne Jenkins', 'Berlin'), ('Geoff Cameron', 'Wayne Jenkins', 'Berlin'), ('Gerald Walker', 'Wayne Jenkins', 'Berlin'), ('Steven Williams', 'Wayne Jenkins', 'Berlin'), ('William Dawson', 'Wayne Jenkins', 'Berlin'), ('Devin Powers', 'Jeremy Stevens', 'San Jose'), ('Frank Hines', 'Jeremy Stevens', 'San Jose'), ('Shelby Newman', 'Jeremy Stevens', 'San Jose'), ('Stephanie Carroll', 'Jeremy Stevens', 'San Jose'), ('Jose Mckay', 'Krista Murphy', 'Moscow'), ('Jozy Altidor', 'Krista Murphy', 'Moscow'), ('Sandra Nixon', 'Krista Murphy', 'Moscow'), ('Sandy Burgess', 'Krista Murphy', 'Moscow'), ('Terry Perez', 'Krista Murphy', 'Moscow'), ('Tracey Smith', 'Krista Murphy', 'Moscow'), ('Bryan Tanner', 'Christina Garza', 'California'), ('Cory Williams', 'Christina Garza', 'California'), ('Donald Wilson', 'Christina Garza', 'California'), ('Graham Zusi', 'Christina Garza', 'California'), ('Ricky Carr', 'Christina Garza', 'California'), ('Steven Scott', 'Christina Garza', 'California'), ('Wayne White', 'Christina Garza', 'California'), ('Brianna Schmidt', 'Brian White', 'Rome'), ('Christy Quinn', 'Brian White', 'Rome'), ('Chris Thomas', 'Corey Jefferson', 'Berlin'), ('Dr. Crystal Baker MD', 'Corey Jefferson', 'Berlin'), ('Geoff Cameron', 'Corey Jefferson', 'Berlin'), ('Gerald Walker', 'Corey Jefferson', 'Berlin'), ('Steven Williams', 'Corey Jefferson', 'Berlin'), ('William Dawson', 'Corey Jefferson', 'Berlin'), ('Jose Mckay', 'Allen Fitzgerald', 'Moscow'), ('Jozy Altidor', 'Allen Fitzgerald', 'Moscow'), ('Sandra Nixon', 'Allen Fitzgerald', 'Moscow'), ('Sandy Burgess', 'Allen Fitzgerald', 'Moscow'), ('Terry Perez', 'Allen Fitzgerald', 'Moscow'), ('Tracey Smith', 'Allen Fitzgerald', 'Moscow')]
Predicted output: [('Nick Rimando', 'James Hoog', 'New York'), ('Brad Davis', 'James Hoog', 'New York'), ('Fabian Johnson', 'Mc Lyon', 'Paris'), ('Brad Guzan', 'Pit Alex', 'London'), ('Dr. Crystal Baker MD', 'Katherine Burch', 'Berlin'), ('Donald Wilson', 'Jonathan Warren MD', 'California'), ('Christy Quinn', 'Adrienne Moore', 'Rome'), ('Dr. Tracy Pitts', 'Pit Alex', 'London'), ('Matthew Johnson', 'Mc Lyon', 'Paris'), ('Sandy Burgess', 'James Conway', 'Moscow'), ('Steven Scott', 'Joseph Ferguson', 'California'), ('David Perry', 'Cindy Roman', 'Paris')]
Sorted and distinct target output: ["('Amy Allen', 'Drew Skinner', 'New York')", "('Amy Allen', 'James Hoog', 'New York')", "('Amy Allen', 'Justin Carter', 'New York')", "('Amy Allen', 'Matthew Schultz', 'New York')", "('Angela Alvarez', 'Drew Skinner', 'New York')", "('Angela Alvarez', 'James Hoog', 'New York')", "('Angela Alvarez', 'Justin Carter', 'New York')", "('Angela Alvarez', 'Matthew Schultz', 'New York')", "('Brad Davis', 'Drew Skinner', 'New York')", "('Brad Davis', 'James Hoog', 'New York')", "('Brad Davis', 'Justin Carter', 'New York')", "('Brad Davis', 'Matthew Schultz', 'New York')", "('Brad Guzan', 'Hailey Ramirez', 'London')", "('Brad Guzan', 'Jennifer Hernandez', 'London')", "('Brad Guzan', 'Jesse Wilson DDS', 'London')", "('Brad Guzan', 'Kimberly Smith', 'London')", "('Brad Guzan', 'Matthew Walter', 'London')", "('Brad Guzan', 'Pit Alex', 'London')", "('Brad Guzan', 'Timothy Ryan', 'London')", "('Brianna Schmidt', 'Adrienne Moore', 'Rome')", "('Brianna Schmidt', 'Angela Hampton', 'Rome')", "('Brianna Schmidt', 'Benjamin Cooley', 'Rome')", "('Brianna Schmidt', 'Brian White', 'Rome')", "('Brianna Schmidt', 'Debra Grant', 'Rome')", "('Brianna Schmidt', 'Edward Lopez', 'Rome')", "('Brianna Schmidt', 'John Lutz', 'Rome')", "('Brianna Schmidt', 'Julie Maxwell', 'Rome')", "('Brianna Schmidt', 'Nicole Hardy', 'Rome')", "('Brianna Schmidt', 'Paul Adam', 'Rome')", "('Brianna Schmidt', 'Timothy Hunter', 'Rome')", "('Bryan Tanner', 'Brandon Warner', 'California')", "('Bryan Tanner', 'Christina Garza', 'California')", "('Bryan Tanner', 'Christine Wood DDS', 'California')", "('Bryan Tanner', 'Glenn Daugherty', 'California')", "('Bryan Tanner', 'Jonathan Warren MD', 'California')", "('Bryan Tanner', 'Joseph Ferguson', 'California')", "('Bryan Tanner', 'Warren Lee', 'California')", "('Chris Thomas', 'Carrie Hall', 'Berlin')", "('Chris Thomas', 'Corey Jefferson', 'Berlin')", "('Chris Thomas', 'Jonathan Hansen', 'Berlin')", "('Chris Thomas', 'Katherine Burch', 'Berlin')", "('Chris Thomas', 'Kelly Abbott', 'Berlin')", "('Chris Thomas', 'Michael Green', 'Berlin')", "('Chris Thomas', 'Rachel Diaz', 'Berlin')", "('Chris Thomas', 'Sean Torres', 'Berlin')", "('Chris Thomas', 'Tommy Moore', 'Berlin')", "('Chris Thomas', 'Wayne Jenkins', 'Berlin')", "('Christopher Marsh', 'Hailey Ramirez', 'London')", "('Christopher Marsh', 'Jennifer Hernandez', 'London')", "('Christopher Marsh', 'Jesse Wilson DDS', 'London')", "('Christopher Marsh', 'Kimberly Smith', 'London')", "('Christopher Marsh', 'Matthew Walter', 'London')", "('Christopher Marsh', 'Pit Alex', 'London')", "('Christopher Marsh', 'Timothy Ryan', 'London')", "('Christy Quinn', 'Adrienne Moore', 'Rome')", "('Christy Quinn', 'Angela Hampton', 'Rome')", "('Christy Quinn', 'Benjamin Cooley', 'Rome')", "('Christy Quinn', 'Brian White', 'Rome')", "('Christy Quinn', 'Debra Grant', 'Rome')", "('Christy Quinn', 'Edward Lopez', 'Rome')", "('Christy Quinn', 'John Lutz', 'Rome')", "('Christy Quinn', 'Julie Maxwell', 'Rome')", "('Christy Quinn', 'Nicole Hardy', 'Rome')", "('Christy Quinn', 'Paul Adam', 'Rome')", "('Christy Quinn', 'Timothy Hunter', 'Rome')", "('Cody Fields', 'Cindy Roman', 'Paris')", "('Cody Fields', 'Jack Waters', 'Paris')", "('Cody Fields', 'Mc Lyon', 'Paris')", "('Cody Fields', 'Nail Knite', 'Paris')", "('Cody Fields', 'Nichole Rasmussen', 'Paris')", "('Cody Fields', 'William Nixon', 'Paris')", "('Cory Williams', 'Brandon Warner', 'California')", "('Cory Williams', 'Christina Garza', 'California')", "('Cory Williams', 'Christine Wood DDS', 'California')", "('Cory Williams', 'Glenn Daugherty', 'California')", "('Cory Williams', 'Jonathan Warren MD', 'California')", "('Cory Williams', 'Joseph Ferguson', 'California')", "('Cory Williams', 'Warren Lee', 'California')", "('David Perry', 'Cindy Roman', 'Paris')", "('David Perry', 'Jack Waters', 'Paris')", "('David Perry', 'Mc Lyon', 'Paris')", "('David Perry', 'Nail Knite', 'Paris')", "('David Perry', 'Nichole Rasmussen', 'Paris')", "('David Perry', 'William Nixon', 'Paris')", "('Devin Powers', 'Jeremy Stevens', 'San Jose')", "('Devin Powers', 'Lauson Hen', 'San Jose')", "('Devin Powers', 'Michelle Williams', 'San Jose')", "('Devin Powers', 'Patrick Delgado', 'San Jose')", "('Donald Wilson', 'Brandon Warner', 'California')", "('Donald Wilson', 'Christina Garza', 'California')", "('Donald Wilson', 'Christine Wood DDS', 'California')", "('Donald Wilson', 'Glenn Daugherty', 'California')", "('Donald Wilson', 'Jonathan Warren MD', 'California')", "('Donald Wilson', 'Joseph Ferguson', 'California')", "('Donald Wilson', 'Warren Lee', 'California')", "('Dr. Crystal Baker MD', 'Carrie Hall', 'Berlin')", "('Dr. Crystal Baker MD', 'Corey Jefferson', 'Berlin')", "('Dr. Crystal Baker MD', 'Jonathan Hansen', 'Berlin')", "('Dr. Crystal Baker MD', 'Katherine Burch', 'Berlin')", "('Dr. Crystal Baker MD', 'Kelly Abbott', 'Berlin')", "('Dr. Crystal Baker MD', 'Michael Green', 'Berlin')", "('Dr. Crystal Baker MD', 'Rachel Diaz', 'Berlin')", "('Dr. Crystal Baker MD', 'Sean Torres', 'Berlin')", "('Dr. Crystal Baker MD', 'Tommy Moore', 'Berlin')", "('Dr. Crystal Baker MD', 'Wayne Jenkins', 'Berlin')", "('Dr. John Evans', 'Hailey Ramirez', 'London')", "('Dr. John Evans', 'Jennifer Hernandez', 'London')", "('Dr. John Evans', 'Jesse Wilson DDS', 'London')", "('Dr. John Evans', 'Kimberly Smith', 'London')", "('Dr. John Evans', 'Matthew Walter', 'London')", "('Dr. John Evans', 'Pit Alex', 'London')", "('Dr. John Evans', 'Timothy Ryan', 'London')", "('Dr. Tracy Pitts', 'Hailey Ramirez', 'London')", "('Dr. Tracy Pitts', 'Jennifer Hernandez', 'London')", "('Dr. Tracy Pitts', 'Jesse Wilson DDS', 'London')", "('Dr. Tracy Pitts', 'Kimberly Smith', 'London')", "('Dr. Tracy Pitts', 'Matthew Walter', 'London')", "('Dr. Tracy Pitts', 'Pit Alex', 'London')", "('Dr. Tracy Pitts', 'Timothy Ryan', 'London')", "('Fabian Johnson', 'Cindy Roman', 'Paris')", "('Fabian Johnson', 'Jack Waters', 'Paris')", "('Fabian Johnson', 'Mc Lyon', 'Paris')", "('Fabian Johnson', 'Nail Knite', 'Paris')", "('Fabian Johnson', 'Nichole Rasmussen', 'Paris')", "('Fabian Johnson', 'William Nixon', 'Paris')", "('Frank Hines', 'Jeremy Stevens', 'San Jose')", "('Frank Hines', 'Lauson Hen', 'San Jose')", "('Frank Hines', 'Michelle Williams', 'San Jose')", "('Frank Hines', 'Patrick Delgado', 'San Jose')", "('Geoff Cameron', 'Carrie Hall', 'Berlin')", "('Geoff Cameron', 'Corey Jefferson', 'Berlin')", "('Geoff Cameron', 'Jonathan Hansen', 'Berlin')", "('Geoff Cameron', 'Katherine Burch', 'Berlin')", "('Geoff Cameron', 'Kelly Abbott', 'Berlin')", "('Geoff Cameron', 'Michael Green', 'Berlin')", "('Geoff Cameron', 'Rachel Diaz', 'Berlin')", "('Geoff Cameron', 'Sean Torres', 'Berlin')", "('Geoff Cameron', 'Tommy Moore', 'Berlin')", "('Geoff Cameron', 'Wayne Jenkins', 'Berlin')", "('Gerald Walker', 'Carrie Hall', 'Berlin')", "('Gerald Walker', 'Corey Jefferson', 'Berlin')", "('Gerald Walker', 'Jonathan Hansen', 'Berlin')", "('Gerald Walker', 'Katherine Burch', 'Berlin')", "('Gerald Walker', 'Kelly Abbott', 'Berlin')", "('Gerald Walker', 'Michael Green', 'Berlin')", "('Gerald Walker', 'Rachel Diaz', 'Berlin')", "('Gerald Walker', 'Sean Torres', 'Berlin')", "('Gerald Walker', 'Tommy Moore', 'Berlin')", "('Gerald Walker', 'Wayne Jenkins', 'Berlin')", "('Graham Zusi', 'Brandon Warner', 'California')", "('Graham Zusi', 'Christina Garza', 'California')", "('Graham Zusi', 'Christine Wood DDS', 'California')", "('Graham Zusi', 'Glenn Daugherty', 'California')", "('Graham Zusi', 'Jonathan Warren MD', 'California')", "('Graham Zusi', 'Joseph Ferguson', 'California')", "('Graham Zusi', 'Warren Lee', 'California')", "('Hannah Garcia', 'Drew Skinner', 'New York')", "('Hannah Garcia', 'James Hoog', 'New York')", "('Hannah Garcia', 'Justin Carter', 'New York')", "('Hannah Garcia', 'Matthew Schultz', 'New York')", "('Holly Hernandez', 'Cindy Roman', 'Paris')", "('Holly Hernandez', 'Jack Waters', 'Paris')", "('Holly Hernandez', 'Mc Lyon', 'Paris')", "('Holly Hernandez', 'Nail Knite', 'Paris')", "('Holly Hernandez', 'Nichole Rasmussen', 'Paris')", "('Holly Hernandez', 'William Nixon', 'Paris')", "('Holly Thompson', 'Cindy Roman', 'Paris')", "('Holly Thompson', 'Jack Waters', 'Paris')", "('Holly Thompson', 'Mc Lyon', 'Paris')", "('Holly Thompson', 'Nail Knite', 'Paris')", "('Holly Thompson', 'Nichole Rasmussen', 'Paris')", "('Holly Thompson', 'William Nixon', 'Paris')", "('Jessica Obrien', 'Hailey Ramirez', 'London')", "('Jessica Obrien', 'Jennifer Hernandez', 'London')", "('Jessica Obrien', 'Jesse Wilson DDS', 'London')", "('Jessica Obrien', 'Kimberly Smith', 'London')", "('Jessica Obrien', 'Matthew Walter', 'London')", "('Jessica Obrien', 'Pit Alex', 'London')", "('Jessica Obrien', 'Timothy Ryan', 'London')", "('Jonathon Medina', 'Cindy Roman', 'Paris')", "('Jonathon Medina', 'Jack Waters', 'Paris')", "('Jonathon Medina', 'Mc Lyon', 'Paris')", "('Jonathon Medina', 'Nail Knite', 'Paris')", "('Jonathon Medina', 'Nichole Rasmussen', 'Paris')", "('Jonathon Medina', 'William Nixon', 'Paris')", "('Jose Mckay', 'Allen Fitzgerald', 'Moscow')", "('Jose Mckay', 'Elizabeth Estes', 'Moscow')", "('Jose Mckay', 'James Conway', 'Moscow')", "('Jose Mckay', 'Kelly Moore', 'Moscow')", "('Jose Mckay', 'Krista Murphy', 'Moscow')", "('Jose Mckay', 'Miss Alexandra Hess', 'Moscow')", "('Jose Mckay', 'Tonya Whitaker', 'Moscow')", "('Jozy Altidor', 'Allen Fitzgerald', 'Moscow')", "('Jozy Altidor', 'Elizabeth Estes', 'Moscow')", "('Jozy Altidor', 'James Conway', 'Moscow')", "('Jozy Altidor', 'Kelly Moore', 'Moscow')", "('Jozy Altidor', 'Krista Murphy', 'Moscow')", "('Jozy Altidor', 'Miss Alexandra Hess', 'Moscow')", "('Jozy Altidor', 'Tonya Whitaker', 'Moscow')", "('Julia Shaffer', 'Hailey Ramirez', 'London')", "('Julia Shaffer', 'Jennifer Hernandez', 'London')", "('Julia Shaffer', 'Jesse Wilson DDS', 'London')", "('Julia Shaffer', 'Kimberly Smith', 'London')", "('Julia Shaffer', 'Matthew Walter', 'London')", "('Julia Shaffer', 'Pit Alex', 'London')", "('Julia Shaffer', 'Timothy Ryan', 'London')", "('Julian Green', 'Hailey Ramirez', 'London')", "('Julian Green', 'Jennifer Hernandez', 'London')", "('Julian Green', 'Jesse Wilson DDS', 'London')", "('Julian Green', 'Kimberly Smith', 'London')", "('Julian Green', 'Matthew Walter', 'London')", "('Julian Green', 'Pit Alex', 'London')", "('Julian Green', 'Timothy Ryan', 'London')", "('Karen Hudson', 'Drew Skinner', 'New York')", "('Karen Hudson', 'James Hoog', 'New York')", "('Karen Hudson', 'Justin Carter', 'New York')", "('Karen Hudson', 'Matthew Schultz', 'New York')", "('Kathleen Holmes', 'Drew Skinner', 'New York')", "('Kathleen Holmes', 'James Hoog', 'New York')", "('Kathleen Holmes', 'Justin Carter', 'New York')", "('Kathleen Holmes', 'Matthew Schultz', 'New York')", "('Kevin Nguyen', 'Hailey Ramirez', 'London')", "('Kevin Nguyen', 'Jennifer Hernandez', 'London')", "('Kevin Nguyen', 'Jesse Wilson DDS', 'London')", "('Kevin Nguyen', 'Kimberly Smith', 'London')", "('Kevin Nguyen', 'Matthew Walter', 'London')", "('Kevin Nguyen', 'Pit Alex', 'London')", "('Kevin Nguyen', 'Timothy Ryan', 'London')", "('Larry Martin', 'Cindy Roman', 'Paris')", "('Larry Martin', 'Jack Waters', 'Paris')", "('Larry Martin', 'Mc Lyon', 'Paris')", "('Larry Martin', 'Nail Knite', 'Paris')", "('Larry Martin', 'Nichole Rasmussen', 'Paris')", "('Larry Martin', 'William Nixon', 'Paris')", "('Leslie Jensen', 'Cindy Roman', 'Paris')", "('Leslie Jensen', 'Jack Waters', 'Paris')", "('Leslie Jensen', 'Mc Lyon', 'Paris')", "('Leslie Jensen', 'Nail Knite', 'Paris')", "('Leslie Jensen', 'Nichole Rasmussen', 'Paris')", "('Leslie Jensen', 'William Nixon', 'Paris')", "('Mary Jacobs', 'Hailey Ramirez', 'London')", "('Mary Jacobs', 'Jennifer Hernandez', 'London')", "('Mary Jacobs', 'Jesse Wilson DDS', 'London')", "('Mary Jacobs', 'Kimberly Smith', 'London')", "('Mary Jacobs', 'Matthew Walter', 'London')", "('Mary Jacobs', 'Pit Alex', 'London')", "('Mary Jacobs', 'Timothy Ryan', 'London')", "('Matthew Johnson', 'Cindy Roman', 'Paris')", "('Matthew Johnson', 'Jack Waters', 'Paris')", "('Matthew Johnson', 'Mc Lyon', 'Paris')", "('Matthew Johnson', 'Nail Knite', 'Paris')", "('Matthew Johnson', 'Nichole Rasmussen', 'Paris')", "('Matthew Johnson', 'William Nixon', 'Paris')", "('Michael Foster', 'Hailey Ramirez', 'London')", "('Michael Foster', 'Jennifer Hernandez', 'London')", "('Michael Foster', 'Jesse Wilson DDS', 'London')", "('Michael Foster', 'Kimberly Smith', 'London')", "('Michael Foster', 'Matthew Walter', 'London')", "('Michael Foster', 'Pit Alex', 'London')", "('Michael Foster', 'Timothy Ryan', 'London')", "('Michael Gordon', 'Hailey Ramirez', 'London')", "('Michael Gordon', 'Jennifer Hernandez', 'London')", "('Michael Gordon', 'Jesse Wilson DDS', 'London')", "('Michael Gordon', 'Kimberly Smith', 'London')", "('Michael Gordon', 'Matthew Walter', 'London')", "('Michael Gordon', 'Pit Alex', 'London')", "('Michael Gordon', 'Timothy Ryan', 'London')", "('Nick Rimando', 'Drew Skinner', 'New York')", "('Nick Rimando', 'James Hoog', 'New York')", "('Nick Rimando', 'Justin Carter', 'New York')", "('Nick Rimando', 'Matthew Schultz', 'New York')", "('Ricky Carr', 'Brandon Warner', 'California')", "('Ricky Carr', 'Christina Garza', 'California')", "('Ricky Carr', 'Christine Wood DDS', 'California')", "('Ricky Carr', 'Glenn Daugherty', 'California')", "('Ricky Carr', 'Jonathan Warren MD', 'California')", "('Ricky Carr', 'Joseph Ferguson', 'California')", "('Ricky Carr', 'Warren Lee', 'California')", "('Samantha Park', 'Hailey Ramirez', 'London')", "('Samantha Park', 'Jennifer Hernandez', 'London')", "('Samantha Park', 'Jesse Wilson DDS', 'London')", "('Samantha Park', 'Kimberly Smith', 'London')", "('Samantha Park', 'Matthew Walter', 'London')", "('Samantha Park', 'Pit Alex', 'London')", "('Samantha Park', 'Timothy Ryan', 'London')", "('Sandra Nixon', 'Allen Fitzgerald', 'Moscow')", "('Sandra Nixon', 'Elizabeth Estes', 'Moscow')", "('Sandra Nixon', 'James Conway', 'Moscow')", "('Sandra Nixon', 'Kelly Moore', 'Moscow')", "('Sandra Nixon', 'Krista Murphy', 'Moscow')", "('Sandra Nixon', 'Miss Alexandra Hess', 'Moscow')", "('Sandra Nixon', 'Tonya Whitaker', 'Moscow')", "('Sandra Young', 'Cindy Roman', 'Paris')", "('Sandra Young', 'Jack Waters', 'Paris')", "('Sandra Young', 'Mc Lyon', 'Paris')", "('Sandra Young', 'Nail Knite', 'Paris')", "('Sandra Young', 'Nichole Rasmussen', 'Paris')", "('Sandra Young', 'William Nixon', 'Paris')", "('Sandy Burgess', 'Allen Fitzgerald', 'Moscow')", "('Sandy Burgess', 'Elizabeth Estes', 'Moscow')", "('Sandy Burgess', 'James Conway', 'Moscow')", "('Sandy Burgess', 'Kelly Moore', 'Moscow')", "('Sandy Burgess', 'Krista Murphy', 'Moscow')", "('Sandy Burgess', 'Miss Alexandra Hess', 'Moscow')", "('Sandy Burgess', 'Tonya Whitaker', 'Moscow')", "('Sarah Barrera', 'Drew Skinner', 'New York')", "('Sarah Barrera', 'James Hoog', 'New York')", "('Sarah Barrera', 'Justin Carter', 'New York')", "('Sarah Barrera', 'Matthew Schultz', 'New York')", "('Shelby Newman', 'Jeremy Stevens', 'San Jose')", "('Shelby Newman', 'Lauson Hen', 'San Jose')", "('Shelby Newman', 'Michelle Williams', 'San Jose')", "('Shelby Newman', 'Patrick Delgado', 'San Jose')", "('Sierra Perry', 'Hailey Ramirez', 'London')", "('Sierra Perry', 'Jennifer Hernandez', 'London')", "('Sierra Perry', 'Jesse Wilson DDS', 'London')", "('Sierra Perry', 'Kimberly Smith', 'London')", "('Sierra Perry', 'Matthew Walter', 'London')", "('Sierra Perry', 'Pit Alex', 'London')", "('Sierra Perry', 'Timothy Ryan', 'London')", "('Stephanie Carroll', 'Jeremy Stevens', 'San Jose')", "('Stephanie Carroll', 'Lauson Hen', 'San Jose')", "('Stephanie Carroll', 'Michelle Williams', 'San Jose')", "('Stephanie Carroll', 'Patrick Delgado', 'San Jose')", "('Stephen Hurley', 'Hailey Ramirez', 'London')", "('Stephen Hurley', 'Jennifer Hernandez', 'London')", "('Stephen Hurley', 'Jesse Wilson DDS', 'London')", "('Stephen Hurley', 'Kimberly Smith', 'London')", "('Stephen Hurley', 'Matthew Walter', 'London')", "('Stephen Hurley', 'Pit Alex', 'London')", "('Stephen Hurley', 'Timothy Ryan', 'London')", "('Steven Scott', 'Brandon Warner', 'California')", "('Steven Scott', 'Christina Garza', 'California')", "('Steven Scott', 'Christine Wood DDS', 'California')", "('Steven Scott', 'Glenn Daugherty', 'California')", "('Steven Scott', 'Jonathan Warren MD', 'California')", "('Steven Scott', 'Joseph Ferguson', 'California')", "('Steven Scott', 'Warren Lee', 'California')", "('Steven Williams', 'Carrie Hall', 'Berlin')", "('Steven Williams', 'Corey Jefferson', 'Berlin')", "('Steven Williams', 'Jonathan Hansen', 'Berlin')", "('Steven Williams', 'Katherine Burch', 'Berlin')", "('Steven Williams', 'Kelly Abbott', 'Berlin')", "('Steven Williams', 'Michael Green', 'Berlin')", "('Steven Williams', 'Rachel Diaz', 'Berlin')", "('Steven Williams', 'Sean Torres', 'Berlin')", "('Steven Williams', 'Tommy Moore', 'Berlin')", "('Steven Williams', 'Wayne Jenkins', 'Berlin')", "('Terry Perez', 'Allen Fitzgerald', 'Moscow')", "('Terry Perez', 'Elizabeth Estes', 'Moscow')", "('Terry Perez', 'James Conway', 'Moscow')", "('Terry Perez', 'Kelly Moore', 'Moscow')", "('Terry Perez', 'Krista Murphy', 'Moscow')", "('Terry Perez', 'Miss Alexandra Hess', 'Moscow')", "('Terry Perez', 'Tonya Whitaker', 'Moscow')", "('Tiffany Hernandez', 'Hailey Ramirez', 'London')", "('Tiffany Hernandez', 'Jennifer Hernandez', 'London')", "('Tiffany Hernandez', 'Jesse Wilson DDS', 'London')", "('Tiffany Hernandez', 'Kimberly Smith', 'London')", "('Tiffany Hernandez', 'Matthew Walter', 'London')", "('Tiffany Hernandez', 'Pit Alex', 'London')", "('Tiffany Hernandez', 'Timothy Ryan', 'London')", "('Tracey Smith', 'Allen Fitzgerald', 'Moscow')", "('Tracey Smith', 'Elizabeth Estes', 'Moscow')", "('Tracey Smith', 'James Conway', 'Moscow')", "('Tracey Smith', 'Kelly Moore', 'Moscow')", "('Tracey Smith', 'Krista Murphy', 'Moscow')", "('Tracey Smith', 'Miss Alexandra Hess', 'Moscow')", "('Tracey Smith', 'Tonya Whitaker', 'Moscow')", "('Wayne White', 'Brandon Warner', 'California')", "('Wayne White', 'Christina Garza', 'California')", "('Wayne White', 'Christine Wood DDS', 'California')", "('Wayne White', 'Glenn Daugherty', 'California')", "('Wayne White', 'Jonathan Warren MD', 'California')", "('Wayne White', 'Joseph Ferguson', 'California')", "('Wayne White', 'Warren Lee', 'California')", "('William Dawson', 'Carrie Hall', 'Berlin')", "('William Dawson', 'Corey Jefferson', 'Berlin')", "('William Dawson', 'Jonathan Hansen', 'Berlin')", "('William Dawson', 'Katherine Burch', 'Berlin')", "('William Dawson', 'Kelly Abbott', 'Berlin')", "('William Dawson', 'Michael Green', 'Berlin')", "('William Dawson', 'Rachel Diaz', 'Berlin')", "('William Dawson', 'Sean Torres', 'Berlin')", "('William Dawson', 'Tommy Moore', 'Berlin')", "('William Dawson', 'Wayne Jenkins', 'Berlin')"]
Sorted and distinct predicted output: ["('Brad Davis', 'James Hoog', 'New York')", "('Brad Guzan', 'Pit Alex', 'London')", "('Christy Quinn', 'Adrienne Moore', 'Rome')", "('David Perry', 'Cindy Roman', 'Paris')", "('Donald Wilson', 'Jonathan Warren MD', 'California')", "('Dr. Crystal Baker MD', 'Katherine Burch', 'Berlin')", "('Dr. Tracy Pitts', 'Pit Alex', 'London')", "('Fabian Johnson', 'Mc Lyon', 'Paris')", "('Matthew Johnson', 'Mc Lyon', 'Paris')", "('Nick Rimando', 'James Hoog', 'New York')", "('Sandy Burgess', 'James Conway', 'Moscow')", "('Steven Scott', 'Joseph Ferguson', 'California')"]
The answer is WRONG.
Number of correct output: 27; Accuracy: 54.0%
 
Index: 17
Question: From the following tables, write a SQL query to find all orders executed by the salesperson and ordered by the customer whose grade is greater than or equal to 200. Compute purch_amt*commission as “Commission”. Return customer name, commission as “Commission%” and Commission.
Target query: SELECT ord_no, cust_name, commission AS "Commission%", purch_amt * commission AS "Commission" FROM salesman, orders, customer WHERE orders.customer_id = customer.customer_id AND orders.salesman_id = salesman.salesman_id AND customer.grade >= 200;
Predicted query: SELECT c.cust_name AS customer_name, (o.purch_amt * s.commission) AS Commission, s.commission AS "Commission%" FROM customer c JOIN orders o ON c.customer_id = o.customer_id JOIN salesman s ON o.salesman_id = s.salesman_id WHERE c.grade >= 200 ORDER BY c.cust_name;
Target output: [(70001, 'Graham Zusi', 0.13, 19.565), (70007, 'Graham Zusi', 0.13, 123.305), (70005, 'Brad Davis', 0.15, 360.09), (70010, 'Fabian Johnson', 0.14, 277.6802), (70012, 'Julian Green', 0.13, 32.5585), (70011, 'Jozy Altidor', 0.13, 9.787700000000001), (70016, 'Chris Thomas', 0.15, 307.6515), (70019, 'Sierra Perry', 0.13, 356.343), (70021, 'Sierra Perry', 0.11, 438.8637), (70024, 'William Dawson', 0.13, 558.4631), (70025, 'Mary Jacobs', 0.1, 46.93000000000001), (70026, 'William Dawson', 0.12, 540.2844), (70027, 'Jozy Altidor', 0.15, 284.3325), (70028, 'Christopher Marsh', 0.12, 250.24679999999998), (70029, 'Larry Martin', 0.13, 209.3065), (70032, 'Graham Zusi', 0.13, 73.99730000000001), (70033, 'Fabian Johnson', 0.12, 451.4076), (70034, 'Chris Thomas', 0.13, 150.82600000000002), (70035, 'Angela Alvarez', 0.12, 565.596), (70036, 'Cody Fields', 0.1, 321.212), (70038, 'Julian Green', 0.12, 332.5332), (70041, 'Tracey Smith', 0.11, 129.0586), (70043, 'Chris Thomas', 0.13, 483.1931), (70045, 'Steven Williams', 0.13, 602.94), (70048, 'Sandy Burgess', 0.12, 596.4527999999999), (70049, 'Graham Zusi', 0.15, 391.2105), (70050, 'Chris Thomas', 0.14, 675.3782000000001), (70051, 'Holly Thompson', 0.11, 243.50259999999997), (70052, 'Sierra Perry', 0.15, 447.64500000000004), (70056, 'Frank Hines', 0.13, 143.9126), (70058, 'Jozy Altidor', 0.11, 190.4375), (70059, 'Fabian Johnson', 0.11, 345.8895), (70060, 'Steven Williams', 0.14, 143.25220000000002)]
Predicted output: [('Angela Alvarez', 565.596, 0.12), ('Brad Davis', 360.09, 0.15), ('Chris Thomas', 307.6515, 0.15), ('Chris Thomas', 150.82600000000002, 0.13), ('Chris Thomas', 483.1931, 0.13), ('Chris Thomas', 675.3782000000001, 0.14), ('Christopher Marsh', 250.24679999999998, 0.12), ('Cody Fields', 321.212, 0.1), ('Fabian Johnson', 277.6802, 0.14), ('Fabian Johnson', 451.4076, 0.12), ('Fabian Johnson', 345.8895, 0.11), ('Frank Hines', 143.9126, 0.13), ('Graham Zusi', 19.565, 0.13), ('Graham Zusi', 123.305, 0.13), ('Graham Zusi', 73.99730000000001, 0.13), ('Graham Zusi', 391.2105, 0.15), ('Holly Thompson', 243.50259999999997, 0.11), ('Jozy Altidor', 9.787700000000001, 0.13), ('Jozy Altidor', 284.3325, 0.15), ('Jozy Altidor', 190.4375, 0.11), ('Julian Green', 32.5585, 0.13), ('Julian Green', 332.5332, 0.12), ('Larry Martin', 209.3065, 0.13), ('Mary Jacobs', 46.93000000000001, 0.1), ('Sandy Burgess', 596.4527999999999, 0.12), ('Sierra Perry', 356.343, 0.13), ('Sierra Perry', 438.8637, 0.11), ('Sierra Perry', 447.64500000000004, 0.15), ('Steven Williams', 602.94, 0.13), ('Steven Williams', 143.25220000000002, 0.14), ('Tracey Smith', 129.0586, 0.11), ('William Dawson', 558.4631, 0.13), ('William Dawson', 540.2844, 0.12)]
Sorted and distinct target output: ["(70001, 'Graham Zusi', 0.13, 19.565)", "(70005, 'Brad Davis', 0.15, 360.09)", "(70007, 'Graham Zusi', 0.13, 123.305)", "(70010, 'Fabian Johnson', 0.14, 277.6802)", "(70011, 'Jozy Altidor', 0.13, 9.787700000000001)", "(70012, 'Julian Green', 0.13, 32.5585)", "(70016, 'Chris Thomas', 0.15, 307.6515)", "(70019, 'Sierra Perry', 0.13, 356.343)", "(70021, 'Sierra Perry', 0.11, 438.8637)", "(70024, 'William Dawson', 0.13, 558.4631)", "(70025, 'Mary Jacobs', 0.1, 46.93000000000001)", "(70026, 'William Dawson', 0.12, 540.2844)", "(70027, 'Jozy Altidor', 0.15, 284.3325)", "(70028, 'Christopher Marsh', 0.12, 250.24679999999998)", "(70029, 'Larry Martin', 0.13, 209.3065)", "(70032, 'Graham Zusi', 0.13, 73.99730000000001)", "(70033, 'Fabian Johnson', 0.12, 451.4076)", "(70034, 'Chris Thomas', 0.13, 150.82600000000002)", "(70035, 'Angela Alvarez', 0.12, 565.596)", "(70036, 'Cody Fields', 0.1, 321.212)", "(70038, 'Julian Green', 0.12, 332.5332)", "(70041, 'Tracey Smith', 0.11, 129.0586)", "(70043, 'Chris Thomas', 0.13, 483.1931)", "(70045, 'Steven Williams', 0.13, 602.94)", "(70048, 'Sandy Burgess', 0.12, 596.4527999999999)", "(70049, 'Graham Zusi', 0.15, 391.2105)", "(70050, 'Chris Thomas', 0.14, 675.3782000000001)", "(70051, 'Holly Thompson', 0.11, 243.50259999999997)", "(70052, 'Sierra Perry', 0.15, 447.64500000000004)", "(70056, 'Frank Hines', 0.13, 143.9126)", "(70058, 'Jozy Altidor', 0.11, 190.4375)", "(70059, 'Fabian Johnson', 0.11, 345.8895)", "(70060, 'Steven Williams', 0.14, 143.25220000000002)"]
Sorted and distinct predicted output: ["('Angela Alvarez', 565.596, 0.12)", "('Brad Davis', 360.09, 0.15)", "('Chris Thomas', 150.82600000000002, 0.13)", "('Chris Thomas', 307.6515, 0.15)", "('Chris Thomas', 483.1931, 0.13)", "('Chris Thomas', 675.3782000000001, 0.14)", "('Christopher Marsh', 250.24679999999998, 0.12)", "('Cody Fields', 321.212, 0.1)", "('Fabian Johnson', 277.6802, 0.14)", "('Fabian Johnson', 345.8895, 0.11)", "('Fabian Johnson', 451.4076, 0.12)", "('Frank Hines', 143.9126, 0.13)", "('Graham Zusi', 123.305, 0.13)", "('Graham Zusi', 19.565, 0.13)", "('Graham Zusi', 391.2105, 0.15)", "('Graham Zusi', 73.99730000000001, 0.13)", "('Holly Thompson', 243.50259999999997, 0.11)", "('Jozy Altidor', 190.4375, 0.11)", "('Jozy Altidor', 284.3325, 0.15)", "('Jozy Altidor', 9.787700000000001, 0.13)", "('Julian Green', 32.5585, 0.13)", "('Julian Green', 332.5332, 0.12)", "('Larry Martin', 209.3065, 0.13)", "('Mary Jacobs', 46.93000000000001, 0.1)", "('Sandy Burgess', 596.4527999999999, 0.12)", "('Sierra Perry', 356.343, 0.13)", "('Sierra Perry', 438.8637, 0.11)", "('Sierra Perry', 447.64500000000004, 0.15)", "('Steven Williams', 143.25220000000002, 0.14)", "('Steven Williams', 602.94, 0.13)", "('Tracey Smith', 129.0586, 0.11)", "('William Dawson', 540.2844, 0.12)", "('William Dawson', 558.4631, 0.13)"]
The answer is WRONG.
Number of correct output: 27; Accuracy: 54.0%
 
Index: 22
Question: Identify salespeople who have not sold to any customer in 'New York'.
Target query: SELECT s.name FROM salesman s WHERE NOT EXISTS (SELECT * FROM customer c WHERE c.city = 'New York' AND c.salesman_id = s.salesman_id);
Predicted query: SELECT name FROM salesman WHERE salesman_id NOT IN (     SELECT salesman_id     FROM orders     JOIN customer ON orders.customer_id = customer.customer_id     WHERE city = 'New York' )
Target output: [('Nail Knite',), ('Pit Alex',), ('Mc Lyon',), ('Paul Adam',), ('Lauson Hen',), ('Joseph Ferguson',), ('Cindy Roman',), ('John Lutz',), ('Nichole Rasmussen',), ('Jesse Wilson DDS',), ('Debra Grant',), ('Michael Green',), ('Adrienne Moore',), ('Tommy Moore',), ('Miss Alexandra Hess',), ('Drew Skinner',), ('Benjamin Cooley',), ('William Nixon',), ('Brandon Warner',), ('Timothy Ryan',), ('Matthew Schultz',), ('Angela Hampton',), ('Kelly Moore',), ('Christine Wood DDS',), ('Tonya Whitaker',), ('Rachel Diaz',), ('Sean Torres',), ('Jack Waters',), ('Kelly Abbott',), ('Jennifer Hernandez',), ('Hailey Ramirez',), ('Elizabeth Estes',), ('Patrick Delgado',), ('Michelle Williams',), ('Katherine Burch',), ('Justin Carter',), ('Jonathan Warren MD',), ('Timothy Hunter',), ('Julie Maxwell',), ('Glenn Daugherty',), ('Kimberly Smith',), ('Matthew Walter',), ('Warren Lee',), ('Carrie Hall',), ('Wayne Jenkins',), ('Jeremy Stevens',), ('Krista Murphy',), ('Christina Garza',), ('Brian White',), ('Corey Jefferson',), ('Allen Fitzgerald',)]
Predicted output: Error
Sorted and distinct target output: ["('Adrienne Moore',)", "('Allen Fitzgerald',)", "('Angela Hampton',)", "('Benjamin Cooley',)", "('Brandon Warner',)", "('Brian White',)", "('Carrie Hall',)", "('Christina Garza',)", "('Christine Wood DDS',)", "('Cindy Roman',)", "('Corey Jefferson',)", "('Debra Grant',)", "('Drew Skinner',)", "('Elizabeth Estes',)", "('Glenn Daugherty',)", "('Hailey Ramirez',)", "('Jack Waters',)", "('Jennifer Hernandez',)", "('Jeremy Stevens',)", "('Jesse Wilson DDS',)", "('John Lutz',)", "('Jonathan Warren MD',)", "('Joseph Ferguson',)", "('Julie Maxwell',)", "('Justin Carter',)", "('Katherine Burch',)", "('Kelly Abbott',)", "('Kelly Moore',)", "('Kimberly Smith',)", "('Krista Murphy',)", "('Lauson Hen',)", "('Matthew Schultz',)", "('Matthew Walter',)", "('Mc Lyon',)", "('Michael Green',)", "('Michelle Williams',)", "('Miss Alexandra Hess',)", "('Nail Knite',)", "('Nichole Rasmussen',)", "('Patrick Delgado',)", "('Paul Adam',)", "('Pit Alex',)", "('Rachel Diaz',)", "('Sean Torres',)", "('Timothy Hunter',)", "('Timothy Ryan',)", "('Tommy Moore',)", "('Tonya Whitaker',)", "('Warren Lee',)", "('Wayne Jenkins',)", "('William Nixon',)"]
Sorted and distinct predicted output: []
The answer is WRONG.
Number of correct output: 27; Accuracy: 54.0%
 
Index: 23
Question: Determine the average order value for each salesman, ordered by average order value in descending order.
Target query: SELECT s.name, AVG(o.purch_amt) AS avg_order_value FROM salesman s JOIN orders o ON s.salesman_id = o.salesman_id GROUP BY s.salesman_id ORDER BY AVG(o.purch_amt) DESC;
Predicted query: SELECT salesman_id, AVG(purch_amt) AS avg_order_value FROM orders GROUP BY salesman_id ORDER BY avg_order_value DESC;
Target output: [('Michael Green', 4970.44), ('Warren Lee', 4785.75), ('Timothy Hunter', 4713.3), ('Rachel Diaz', 4651.47), ('Angela Hampton', 4638.0), ('Justin Carter', 4532.41), ('Jonathan Hansen', 4502.37), ('Kimberly Smith', 3989.67), ('Timothy Ryan', 3761.73), ('Cindy Roman', 3716.87), ('Glenn Daugherty', 3633.23), ('Allen Fitzgerald', 3212.12), ('Mc Lyon', 3181.415), ('Benjamin Cooley', 3144.45), ('Tonya Whitaker', 3019.295), ('James Hoog', 3004.952), ('Matthew Schultz', 2923.6800000000003), ('Jennifer Hernandez', 2741.1), ('Debra Grant', 2689.67), ('Miss Alexandra Hess', 2656.2700000000004), ('Christine Wood DDS', 2439.925), ('Paul Adam', 2185.58), ('Pit Alex', 2131.14), ('Jeremy Stevens', 2016.8500000000001), ('Nichole Rasmussen', 1986.2549999999999), ('James Conway', 1873.6550000000002), ('Jonathan Warren MD', 1731.25), ('Sean Torres', 1629.92), ('Jack Waters', 1629.846666666667), ('Lauson Hen', 1467.6966666666667), ('Joseph Ferguson', 1418.38), ('Christina Garza', 1204.16), ('Hailey Ramirez', 1160.2), ('John Lutz', 948.26), ('Nail Knite', 739.875), ('Katherine Burch', 612.7), ('Julie Maxwell', 569.21), ('William Nixon', 469.3)]
Predicted output: [(5016, 4970.44), (5049, 4785.75), (5044, 4713.3), (5031, 4651.47), (5027, 4638.0), (5041, 4532.41), (5043, 4502.37), (5047, 3989.67), (5025, 3761.73), (5009, 3716.87), (5046, 3633.23), (5057, 3212.12), (5006, 3181.415), (5022, 3144.45), (5030, 3019.295), (5001, 3004.952), (5026, 2923.6800000000003), (5035, 2741.1), (5015, 2689.67), (5019, 2656.2700000000004), (5029, 2439.925), (5007, 2185.58), (5005, 2131.14), (5052, 2016.8500000000001), (5013, 1986.2549999999999), (5010, 1873.6550000000002), (5042, 1731.25), (5032, 1629.92), (5033, 1629.846666666667), (5003, 1467.6966666666667), (5008, 1418.38), (5054, 1204.16), (5036, 1160.2), (5011, 948.26), (5002, 739.875), (5040, 612.7), (5045, 569.21), (5023, 469.3)]
Sorted and distinct target output: ["('Allen Fitzgerald', 3212.12)", "('Angela Hampton', 4638.0)", "('Benjamin Cooley', 3144.45)", "('Christina Garza', 1204.16)", "('Christine Wood DDS', 2439.925)", "('Cindy Roman', 3716.87)", "('Debra Grant', 2689.67)", "('Glenn Daugherty', 3633.23)", "('Hailey Ramirez', 1160.2)", "('Jack Waters', 1629.846666666667)", "('James Conway', 1873.6550000000002)", "('James Hoog', 3004.952)", "('Jennifer Hernandez', 2741.1)", "('Jeremy Stevens', 2016.8500000000001)", "('John Lutz', 948.26)", "('Jonathan Hansen', 4502.37)", "('Jonathan Warren MD', 1731.25)", "('Joseph Ferguson', 1418.38)", "('Julie Maxwell', 569.21)", "('Justin Carter', 4532.41)", "('Katherine Burch', 612.7)", "('Kimberly Smith', 3989.67)", "('Lauson Hen', 1467.6966666666667)", "('Matthew Schultz', 2923.6800000000003)", "('Mc Lyon', 3181.415)", "('Michael Green', 4970.44)", "('Miss Alexandra Hess', 2656.2700000000004)", "('Nail Knite', 739.875)", "('Nichole Rasmussen', 1986.2549999999999)", "('Paul Adam', 2185.58)", "('Pit Alex', 2131.14)", "('Rachel Diaz', 4651.47)", "('Sean Torres', 1629.92)", "('Timothy Hunter', 4713.3)", "('Timothy Ryan', 3761.73)", "('Tonya Whitaker', 3019.295)", "('Warren Lee', 4785.75)", "('William Nixon', 469.3)"]
Sorted and distinct predicted output: ['(5001, 3004.952)', '(5002, 739.875)', '(5003, 1467.6966666666667)', '(5005, 2131.14)', '(5006, 3181.415)', '(5007, 2185.58)', '(5008, 1418.38)', '(5009, 3716.87)', '(5010, 1873.6550000000002)', '(5011, 948.26)', '(5013, 1986.2549999999999)', '(5015, 2689.67)', '(5016, 4970.44)', '(5019, 2656.2700000000004)', '(5022, 3144.45)', '(5023, 469.3)', '(5025, 3761.73)', '(5026, 2923.6800000000003)', '(5027, 4638.0)', '(5029, 2439.925)', '(5030, 3019.295)', '(5031, 4651.47)', '(5032, 1629.92)', '(5033, 1629.846666666667)', '(5035, 2741.1)', '(5036, 1160.2)', '(5040, 612.7)', '(5041, 4532.41)', '(5042, 1731.25)', '(5043, 4502.37)', '(5044, 4713.3)', '(5045, 569.21)', '(5046, 3633.23)', '(5047, 3989.67)', '(5049, 4785.75)', '(5052, 2016.8500000000001)', '(5054, 1204.16)', '(5057, 3212.12)']
The answer is WRONG.
Number of correct output: 27; Accuracy: 54.0%
 
Index: 25
Question: Display the name of each salesman along with their highest single order amount.
Target query: SELECT s.name, MAX(o.purch_amt) FROM salesman s JOIN orders o ON s.salesman_id = o.salesman_id GROUP BY s.salesman_id;
Predicted query: SELECT s.name, MAX(o.purch_amt) AS highest_order_amount FROM salesman s JOIN orders o ON s.salesman_id = o.salesman_id GROUP BY s.name;
Target output: [('James Hoog', 5760), ('Nail Knite', 1610.05), ('Lauson Hen', 2480.4), ('Pit Alex', 3991.63), ('Mc Lyon', 4379.4), ('Paul Adam', 4295.87), ('Joseph Ferguson', 1663.5), ('Cindy Roman', 3716.87), ('James Conway', 2434.26), ('John Lutz', 948.26), ('Nichole Rasmussen', 2085.39), ('Debra Grant', 2771.11), ('Michael Green', 4970.44), ('Miss Alexandra Hess', 4205.52), ('Benjamin Cooley', 3144.45), ('William Nixon', 469.3), ('Timothy Ryan', 3761.73), ('Matthew Schultz', 4824.13), ('Angela Hampton', 4638), ('Christine Wood DDS', 2984.3), ('Tonya Whitaker', 3824.93), ('Rachel Diaz', 4945.56), ('Sean Torres', 1629.92), ('Jack Waters', 2608.07), ('Jennifer Hernandez', 2741.1), ('Hailey Ramirez', 1160.2), ('Katherine Burch', 612.7), ('Justin Carter', 4532.41), ('Jonathan Warren MD', 1731.25), ('Jonathan Hansen', 4502.37), ('Timothy Hunter', 4713.3), ('Julie Maxwell', 569.21), ('Glenn Daugherty', 3633.23), ('Kimberly Smith', 3989.67), ('Warren Lee', 4785.75), ('Jeremy Stevens', 3257.51), ('Christina Garza', 1204.16), ('Allen Fitzgerald', 3212.12)]
Predicted output: [('Allen Fitzgerald', 3212.12), ('Angela Hampton', 4638), ('Benjamin Cooley', 3144.45), ('Christina Garza', 1204.16), ('Christine Wood DDS', 2984.3), ('Cindy Roman', 3716.87), ('Debra Grant', 2771.11), ('Glenn Daugherty', 3633.23), ('Hailey Ramirez', 1160.2), ('Jack Waters', 2608.07), ('James Conway', 2434.26), ('James Hoog', 5760), ('Jennifer Hernandez', 2741.1), ('Jeremy Stevens', 3257.51), ('John Lutz', 948.26), ('Jonathan Hansen', 4502.37), ('Jonathan Warren MD', 1731.25), ('Joseph Ferguson', 1663.5), ('Julie Maxwell', 569.21), ('Justin Carter', 4532.41), ('Katherine Burch', 612.7), ('Kimberly Smith', 3989.67), ('Lauson Hen', 2480.4), ('Matthew Schultz', 4824.13), ('Mc Lyon', 4379.4), ('Michael Green', 4970.44), ('Miss Alexandra Hess', 4205.52), ('Nail Knite', 1610.05), ('Nichole Rasmussen', 2085.39), ('Paul Adam', 4295.87), ('Pit Alex', 3991.63), ('Rachel Diaz', 4945.56), ('Sean Torres', 1629.92), ('Timothy Hunter', 4713.3), ('Timothy Ryan', 3761.73), ('Tonya Whitaker', 3824.93), ('Warren Lee', 4785.75), ('William Nixon', 469.3)]
Sorted and distinct target output: ["('Allen Fitzgerald', 3212.12)", "('Angela Hampton', 4638)", "('Benjamin Cooley', 3144.45)", "('Christina Garza', 1204.16)", "('Christine Wood DDS', 2984.3)", "('Cindy Roman', 3716.87)", "('Debra Grant', 2771.11)", "('Glenn Daugherty', 3633.23)", "('Hailey Ramirez', 1160.2)", "('Jack Waters', 2608.07)", "('James Conway', 2434.26)", "('James Hoog', 5760)", "('Jennifer Hernandez', 2741.1)", "('Jeremy Stevens', 3257.51)", "('John Lutz', 948.26)", "('Jonathan Hansen', 4502.37)", "('Jonathan Warren MD', 1731.25)", "('Joseph Ferguson', 1663.5)", "('Julie Maxwell', 569.21)", "('Justin Carter', 4532.41)", "('Katherine Burch', 612.7)", "('Kimberly Smith', 3989.67)", "('Lauson Hen', 2480.4)", "('Matthew Schultz', 4824.13)", "('Mc Lyon', 4379.4)", "('Michael Green', 4970.44)", "('Miss Alexandra Hess', 4205.52)", "('Nail Knite', 1610.05)", "('Nichole Rasmussen', 2085.39)", "('Paul Adam', 4295.87)", "('Pit Alex', 3991.63)", "('Rachel Diaz', 4945.56)", "('Sean Torres', 1629.92)", "('Timothy Hunter', 4713.3)", "('Timothy Ryan', 3761.73)", "('Tonya Whitaker', 3824.93)", "('Warren Lee', 4785.75)", "('William Nixon', 469.3)"]
Sorted and distinct predicted output: ["('Allen Fitzgerald', 3212.12)", "('Angela Hampton', 4638)", "('Benjamin Cooley', 3144.45)", "('Christina Garza', 1204.16)", "('Christine Wood DDS', 2984.3)", "('Cindy Roman', 3716.87)", "('Debra Grant', 2771.11)", "('Glenn Daugherty', 3633.23)", "('Hailey Ramirez', 1160.2)", "('Jack Waters', 2608.07)", "('James Conway', 2434.26)", "('James Hoog', 5760)", "('Jennifer Hernandez', 2741.1)", "('Jeremy Stevens', 3257.51)", "('John Lutz', 948.26)", "('Jonathan Hansen', 4502.37)", "('Jonathan Warren MD', 1731.25)", "('Joseph Ferguson', 1663.5)", "('Julie Maxwell', 569.21)", "('Justin Carter', 4532.41)", "('Katherine Burch', 612.7)", "('Kimberly Smith', 3989.67)", "('Lauson Hen', 2480.4)", "('Matthew Schultz', 4824.13)", "('Mc Lyon', 4379.4)", "('Michael Green', 4970.44)", "('Miss Alexandra Hess', 4205.52)", "('Nail Knite', 1610.05)", "('Nichole Rasmussen', 2085.39)", "('Paul Adam', 4295.87)", "('Pit Alex', 3991.63)", "('Rachel Diaz', 4945.56)", "('Sean Torres', 1629.92)", "('Timothy Hunter', 4713.3)", "('Timothy Ryan', 3761.73)", "('Tonya Whitaker', 3824.93)", "('Warren Lee', 4785.75)", "('William Nixon', 469.3)"]
The answer is CORRECT.
Number of correct output: 28; Accuracy: 56.00000000000001%
 
Index: 26
Question: List all salesmen and the total number of orders they have processed, including those with zero orders.
Target query: SELECT s.name, COUNT(o.ord_no) FROM salesman s LEFT JOIN orders o ON s.salesman_id = o.salesman_id GROUP BY s.salesman_id;
Predicted query: SELECT s.name, COUNT(o.ord_no) AS total_orders FROM salesman s LEFT JOIN orders o ON s.salesman_id = o.salesman_id GROUP BY s.name;
Target output: [('James Hoog', 5), ('Nail Knite', 4), ('Lauson Hen', 3), ('Pit Alex', 2), ('Mc Lyon', 2), ('Paul Adam', 2), ('Joseph Ferguson', 2), ('Cindy Roman', 1), ('James Conway', 2), ('John Lutz', 1), ('Nicole Hardy', 0), ('Nichole Rasmussen', 2), ('Jesse Wilson DDS', 0), ('Debra Grant', 2), ('Michael Green', 1), ('Adrienne Moore', 0), ('Tommy Moore', 0), ('Miss Alexandra Hess', 2), ('Drew Skinner', 0), ('Edward Lopez', 0), ('Benjamin Cooley', 1), ('William Nixon', 1), ('Brandon Warner', 0), ('Timothy Ryan', 1), ('Matthew Schultz', 2), ('Angela Hampton', 1), ('Kelly Moore', 0), ('Christine Wood DDS', 2), ('Tonya Whitaker', 2), ('Rachel Diaz', 2), ('Sean Torres', 1), ('Jack Waters', 3), ('Kelly Abbott', 0), ('Jennifer Hernandez', 1), ('Hailey Ramirez', 1), ('Elizabeth Estes', 0), ('Patrick Delgado', 0), ('Michelle Williams', 0), ('Katherine Burch', 1), ('Justin Carter', 1), ('Jonathan Warren MD', 1), ('Jonathan Hansen', 1), ('Timothy Hunter', 1), ('Julie Maxwell', 1), ('Glenn Daugherty', 1), ('Kimberly Smith', 1), ('Matthew Walter', 0), ('Warren Lee', 1), ('Carrie Hall', 0), ('Wayne Jenkins', 0), ('Jeremy Stevens', 2), ('Krista Murphy', 0), ('Christina Garza', 1), ('Brian White', 0), ('Corey Jefferson', 0), ('Allen Fitzgerald', 1)]
Predicted output: [('Adrienne Moore', 0), ('Allen Fitzgerald', 1), ('Angela Hampton', 1), ('Benjamin Cooley', 1), ('Brandon Warner', 0), ('Brian White', 0), ('Carrie Hall', 0), ('Christina Garza', 1), ('Christine Wood DDS', 2), ('Cindy Roman', 1), ('Corey Jefferson', 0), ('Debra Grant', 2), ('Drew Skinner', 0), ('Edward Lopez', 0), ('Elizabeth Estes', 0), ('Glenn Daugherty', 1), ('Hailey Ramirez', 1), ('Jack Waters', 3), ('James Conway', 2), ('James Hoog', 5), ('Jennifer Hernandez', 1), ('Jeremy Stevens', 2), ('Jesse Wilson DDS', 0), ('John Lutz', 1), ('Jonathan Hansen', 1), ('Jonathan Warren MD', 1), ('Joseph Ferguson', 2), ('Julie Maxwell', 1), ('Justin Carter', 1), ('Katherine Burch', 1), ('Kelly Abbott', 0), ('Kelly Moore', 0), ('Kimberly Smith', 1), ('Krista Murphy', 0), ('Lauson Hen', 3), ('Matthew Schultz', 2), ('Matthew Walter', 0), ('Mc Lyon', 2), ('Michael Green', 1), ('Michelle Williams', 0), ('Miss Alexandra Hess', 2), ('Nail Knite', 4), ('Nichole Rasmussen', 2), ('Nicole Hardy', 0), ('Patrick Delgado', 0), ('Paul Adam', 2), ('Pit Alex', 2), ('Rachel Diaz', 2), ('Sean Torres', 1), ('Timothy Hunter', 1), ('Timothy Ryan', 1), ('Tommy Moore', 0), ('Tonya Whitaker', 2), ('Warren Lee', 1), ('Wayne Jenkins', 0), ('William Nixon', 1)]
Sorted and distinct target output: ["('Adrienne Moore', 0)", "('Allen Fitzgerald', 1)", "('Angela Hampton', 1)", "('Benjamin Cooley', 1)", "('Brandon Warner', 0)", "('Brian White', 0)", "('Carrie Hall', 0)", "('Christina Garza', 1)", "('Christine Wood DDS', 2)", "('Cindy Roman', 1)", "('Corey Jefferson', 0)", "('Debra Grant', 2)", "('Drew Skinner', 0)", "('Edward Lopez', 0)", "('Elizabeth Estes', 0)", "('Glenn Daugherty', 1)", "('Hailey Ramirez', 1)", "('Jack Waters', 3)", "('James Conway', 2)", "('James Hoog', 5)", "('Jennifer Hernandez', 1)", "('Jeremy Stevens', 2)", "('Jesse Wilson DDS', 0)", "('John Lutz', 1)", "('Jonathan Hansen', 1)", "('Jonathan Warren MD', 1)", "('Joseph Ferguson', 2)", "('Julie Maxwell', 1)", "('Justin Carter', 1)", "('Katherine Burch', 1)", "('Kelly Abbott', 0)", "('Kelly Moore', 0)", "('Kimberly Smith', 1)", "('Krista Murphy', 0)", "('Lauson Hen', 3)", "('Matthew Schultz', 2)", "('Matthew Walter', 0)", "('Mc Lyon', 2)", "('Michael Green', 1)", "('Michelle Williams', 0)", "('Miss Alexandra Hess', 2)", "('Nail Knite', 4)", "('Nichole Rasmussen', 2)", "('Nicole Hardy', 0)", "('Patrick Delgado', 0)", "('Paul Adam', 2)", "('Pit Alex', 2)", "('Rachel Diaz', 2)", "('Sean Torres', 1)", "('Timothy Hunter', 1)", "('Timothy Ryan', 1)", "('Tommy Moore', 0)", "('Tonya Whitaker', 2)", "('Warren Lee', 1)", "('Wayne Jenkins', 0)", "('William Nixon', 1)"]
Sorted and distinct predicted output: ["('Adrienne Moore', 0)", "('Allen Fitzgerald', 1)", "('Angela Hampton', 1)", "('Benjamin Cooley', 1)", "('Brandon Warner', 0)", "('Brian White', 0)", "('Carrie Hall', 0)", "('Christina Garza', 1)", "('Christine Wood DDS', 2)", "('Cindy Roman', 1)", "('Corey Jefferson', 0)", "('Debra Grant', 2)", "('Drew Skinner', 0)", "('Edward Lopez', 0)", "('Elizabeth Estes', 0)", "('Glenn Daugherty', 1)", "('Hailey Ramirez', 1)", "('Jack Waters', 3)", "('James Conway', 2)", "('James Hoog', 5)", "('Jennifer Hernandez', 1)", "('Jeremy Stevens', 2)", "('Jesse Wilson DDS', 0)", "('John Lutz', 1)", "('Jonathan Hansen', 1)", "('Jonathan Warren MD', 1)", "('Joseph Ferguson', 2)", "('Julie Maxwell', 1)", "('Justin Carter', 1)", "('Katherine Burch', 1)", "('Kelly Abbott', 0)", "('Kelly Moore', 0)", "('Kimberly Smith', 1)", "('Krista Murphy', 0)", "('Lauson Hen', 3)", "('Matthew Schultz', 2)", "('Matthew Walter', 0)", "('Mc Lyon', 2)", "('Michael Green', 1)", "('Michelle Williams', 0)", "('Miss Alexandra Hess', 2)", "('Nail Knite', 4)", "('Nichole Rasmussen', 2)", "('Nicole Hardy', 0)", "('Patrick Delgado', 0)", "('Paul Adam', 2)", "('Pit Alex', 2)", "('Rachel Diaz', 2)", "('Sean Torres', 1)", "('Timothy Hunter', 1)", "('Timothy Ryan', 1)", "('Tommy Moore', 0)", "('Tonya Whitaker', 2)", "('Warren Lee', 1)", "('Wayne Jenkins', 0)", "('William Nixon', 1)"]
The answer is CORRECT.
Number of correct output: 29; Accuracy: 57.99999999999999%
 
Index: 29
Question: Show the date of the first order placed by each customer.
Target query: SELECT c.cust_name, MIN(o.ord_date) FROM customer c JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.customer_id;
Predicted query: SELECT customer_id, MIN(ord_date) AS first_order_date FROM orders GROUP BY customer_id;
Target output: [('Brad Guzan', '2012-09-10'), ('Nick Rimando', '2012-04-25'), ('Jozy Altidor', '2012-06-25'), ('Fabian Johnson', '2012-08-22'), ('Graham Zusi', '2012-09-10'), ('Brad Davis', '2012-07-27'), ('Julian Green', '2012-06-27'), ('Geoff Cameron', '2012-08-17'), ('Leslie Jensen', '2012-04-05'), ('Mary Jacobs', '2012-11-10'), ('Dr. Crystal Baker MD', '2013-05-12'), ('William Dawson', '2012-03-23'), ('Angela Alvarez', '2012-02-09'), ('Karen Hudson', '2013-02-23'), ('Holly Hernandez', '2012-12-01'), ('Sandra Nixon', '2012-11-22'), ('Devin Powers', '2012-10-05'), ('Frank Hines', '2012-03-21'), ('Jessica Obrien', '2012-02-23'), ('Christopher Marsh', '2013-03-29'), ('Kevin Nguyen', '2012-05-03'), ('Chris Thomas', '2012-05-21'), ('Matthew Johnson', '2013-06-09'), ('Steven Williams', '2012-11-08'), ('Sarah Barrera', '2012-07-13'), ('Samantha Park', '2013-08-08'), ('Jose Mckay', '2012-01-07'), ('Sandy Burgess', '2012-03-05'), ('Cody Fields', '2012-07-09'), ('Tracey Smith', '2012-08-12'), ('David Perry', '2012-06-25'), ('Holly Thompson', '2013-04-26'), ('Sierra Perry', '2012-10-27'), ('Michael Foster', '2013-05-03'), ('Larry Martin', '2013-04-03'), ('Hannah Garcia', '2012-02-10')]
Predicted output: [(3001, '2012-09-10'), (3002, '2012-04-25'), (3003, '2012-06-25'), (3004, '2012-08-22'), (3005, '2012-09-10'), (3007, '2012-07-27'), (3008, '2012-06-27'), (3009, '2012-08-17'), (3011, '2012-04-05'), (3012, '2012-11-10'), (3014, '2013-05-12'), (3015, '2012-03-23'), (3018, '2012-02-09'), (3019, '2013-02-23'), (3020, '2012-12-01'), (3023, '2012-11-22'), (3026, '2012-10-05'), (3030, '2012-03-21'), (3033, '2012-02-23'), (3035, '2013-03-29'), (3036, '2012-05-03'), (3037, '2012-05-21'), (3040, '2013-06-09'), (3042, '2012-11-08'), (3043, '2012-07-13'), (3045, '2013-08-08'), (3046, '2012-01-07'), (3047, '2012-03-05'), (3049, '2012-07-09'), (3050, '2012-08-12'), (3053, '2012-06-25'), (3054, '2013-04-26'), (3055, '2012-10-27'), (3057, '2013-05-03'), (3058, '2013-04-03'), (3059, '2012-02-10')]
Sorted and distinct target output: ["('Angela Alvarez', '2012-02-09')", "('Brad Davis', '2012-07-27')", "('Brad Guzan', '2012-09-10')", "('Chris Thomas', '2012-05-21')", "('Christopher Marsh', '2013-03-29')", "('Cody Fields', '2012-07-09')", "('David Perry', '2012-06-25')", "('Devin Powers', '2012-10-05')", "('Dr. Crystal Baker MD', '2013-05-12')", "('Fabian Johnson', '2012-08-22')", "('Frank Hines', '2012-03-21')", "('Geoff Cameron', '2012-08-17')", "('Graham Zusi', '2012-09-10')", "('Hannah Garcia', '2012-02-10')", "('Holly Hernandez', '2012-12-01')", "('Holly Thompson', '2013-04-26')", "('Jessica Obrien', '2012-02-23')", "('Jose Mckay', '2012-01-07')", "('Jozy Altidor', '2012-06-25')", "('Julian Green', '2012-06-27')", "('Karen Hudson', '2013-02-23')", "('Kevin Nguyen', '2012-05-03')", "('Larry Martin', '2013-04-03')", "('Leslie Jensen', '2012-04-05')", "('Mary Jacobs', '2012-11-10')", "('Matthew Johnson', '2013-06-09')", "('Michael Foster', '2013-05-03')", "('Nick Rimando', '2012-04-25')", "('Samantha Park', '2013-08-08')", "('Sandra Nixon', '2012-11-22')", "('Sandy Burgess', '2012-03-05')", "('Sarah Barrera', '2012-07-13')", "('Sierra Perry', '2012-10-27')", "('Steven Williams', '2012-11-08')", "('Tracey Smith', '2012-08-12')", "('William Dawson', '2012-03-23')"]
Sorted and distinct predicted output: ["(3001, '2012-09-10')", "(3002, '2012-04-25')", "(3003, '2012-06-25')", "(3004, '2012-08-22')", "(3005, '2012-09-10')", "(3007, '2012-07-27')", "(3008, '2012-06-27')", "(3009, '2012-08-17')", "(3011, '2012-04-05')", "(3012, '2012-11-10')", "(3014, '2013-05-12')", "(3015, '2012-03-23')", "(3018, '2012-02-09')", "(3019, '2013-02-23')", "(3020, '2012-12-01')", "(3023, '2012-11-22')", "(3026, '2012-10-05')", "(3030, '2012-03-21')", "(3033, '2012-02-23')", "(3035, '2013-03-29')", "(3036, '2012-05-03')", "(3037, '2012-05-21')", "(3040, '2013-06-09')", "(3042, '2012-11-08')", "(3043, '2012-07-13')", "(3045, '2013-08-08')", "(3046, '2012-01-07')", "(3047, '2012-03-05')", "(3049, '2012-07-09')", "(3050, '2012-08-12')", "(3053, '2012-06-25')", "(3054, '2013-04-26')", "(3055, '2012-10-27')", "(3057, '2013-05-03')", "(3058, '2013-04-03')", "(3059, '2012-02-10')"]
The answer is WRONG.
Number of correct output: 29; Accuracy: 57.99999999999999%
 
Index: 30
Question: List the top 3 customers by total order amount in 'London'.
Target query: SELECT c.cust_name, SUM(o.purch_amt) AS total_order_amount FROM customer c JOIN orders o ON c.customer_id = o.customer_id WHERE c.city = 'London' GROUP BY c.customer_id ORDER BY total_order_amount DESC LIMIT 3;
Predicted query: SELECT c.cust_name, SUM(o.purch_amt) AS total_order_amount FROM customer c JOIN orders o ON c.customer_id = o.customer_id JOIN salesman s ON c.salesman_id = s.salesman_id WHERE s.city = 'London' GROUP BY c.cust_name ORDER BY total_order_amount DESC LIMIT 3;
Target output: [('Sierra Perry', 9715.07), ('Michael Foster', 8203.07), ('Jessica Obrien', 7140.639999999999)]
Predicted output: [('Holly Hernandez', 3824.93), ('Sandra Nixon', 1887.12), ('Frank Hines', 1107.02)]
Sorted and distinct target output: ["('Jessica Obrien', 7140.639999999999)", "('Michael Foster', 8203.07)", "('Sierra Perry', 9715.07)"]
Sorted and distinct predicted output: ["('Frank Hines', 1107.02)", "('Holly Hernandez', 3824.93)", "('Sandra Nixon', 1887.12)"]
The answer is WRONG.
Number of correct output: 29; Accuracy: 57.99999999999999%
 
Index: 31
Question: For each salesman, count how many orders above $500 they have processed.
Target query: SELECT s.name, COUNT(*) FROM salesman s JOIN orders o ON s.salesman_id = o.salesman_id WHERE o.purch_amt > 500 GROUP BY s.salesman_id;
Predicted query: SELECT s.name AS salesman_name, COUNT(o.ord_no) AS num_orders_above_500 FROM salesman s JOIN orders o ON s.salesman_id = o.salesman_id WHERE o.purch_amt > 500 GROUP BY s.name;
Target output: [('James Hoog', 4), ('Nail Knite', 2), ('Lauson Hen', 2), ('Pit Alex', 1), ('Mc Lyon', 2), ('Paul Adam', 1), ('Joseph Ferguson', 2), ('Cindy Roman', 1), ('James Conway', 2), ('John Lutz', 1), ('Nichole Rasmussen', 2), ('Debra Grant', 2), ('Michael Green', 1), ('Miss Alexandra Hess', 2), ('Benjamin Cooley', 1), ('Timothy Ryan', 1), ('Matthew Schultz', 2), ('Angela Hampton', 1), ('Christine Wood DDS', 2), ('Tonya Whitaker', 2), ('Rachel Diaz', 2), ('Sean Torres', 1), ('Jack Waters', 2), ('Jennifer Hernandez', 1), ('Hailey Ramirez', 1), ('Katherine Burch', 1), ('Justin Carter', 1), ('Jonathan Warren MD', 1), ('Jonathan Hansen', 1), ('Timothy Hunter', 1), ('Julie Maxwell', 1), ('Glenn Daugherty', 1), ('Kimberly Smith', 1), ('Warren Lee', 1), ('Jeremy Stevens', 2), ('Christina Garza', 1), ('Allen Fitzgerald', 1)]
Predicted output: [('Allen Fitzgerald', 1), ('Angela Hampton', 1), ('Benjamin Cooley', 1), ('Christina Garza', 1), ('Christine Wood DDS', 2), ('Cindy Roman', 1), ('Debra Grant', 2), ('Glenn Daugherty', 1), ('Hailey Ramirez', 1), ('Jack Waters', 2), ('James Conway', 2), ('James Hoog', 4), ('Jennifer Hernandez', 1), ('Jeremy Stevens', 2), ('John Lutz', 1), ('Jonathan Hansen', 1), ('Jonathan Warren MD', 1), ('Joseph Ferguson', 2), ('Julie Maxwell', 1), ('Justin Carter', 1), ('Katherine Burch', 1), ('Kimberly Smith', 1), ('Lauson Hen', 2), ('Matthew Schultz', 2), ('Mc Lyon', 2), ('Michael Green', 1), ('Miss Alexandra Hess', 2), ('Nail Knite', 2), ('Nichole Rasmussen', 2), ('Paul Adam', 1), ('Pit Alex', 1), ('Rachel Diaz', 2), ('Sean Torres', 1), ('Timothy Hunter', 1), ('Timothy Ryan', 1), ('Tonya Whitaker', 2), ('Warren Lee', 1)]
Sorted and distinct target output: ["('Allen Fitzgerald', 1)", "('Angela Hampton', 1)", "('Benjamin Cooley', 1)", "('Christina Garza', 1)", "('Christine Wood DDS', 2)", "('Cindy Roman', 1)", "('Debra Grant', 2)", "('Glenn Daugherty', 1)", "('Hailey Ramirez', 1)", "('Jack Waters', 2)", "('James Conway', 2)", "('James Hoog', 4)", "('Jennifer Hernandez', 1)", "('Jeremy Stevens', 2)", "('John Lutz', 1)", "('Jonathan Hansen', 1)", "('Jonathan Warren MD', 1)", "('Joseph Ferguson', 2)", "('Julie Maxwell', 1)", "('Justin Carter', 1)", "('Katherine Burch', 1)", "('Kimberly Smith', 1)", "('Lauson Hen', 2)", "('Matthew Schultz', 2)", "('Mc Lyon', 2)", "('Michael Green', 1)", "('Miss Alexandra Hess', 2)", "('Nail Knite', 2)", "('Nichole Rasmussen', 2)", "('Paul Adam', 1)", "('Pit Alex', 1)", "('Rachel Diaz', 2)", "('Sean Torres', 1)", "('Timothy Hunter', 1)", "('Timothy Ryan', 1)", "('Tonya Whitaker', 2)", "('Warren Lee', 1)"]
Sorted and distinct predicted output: ["('Allen Fitzgerald', 1)", "('Angela Hampton', 1)", "('Benjamin Cooley', 1)", "('Christina Garza', 1)", "('Christine Wood DDS', 2)", "('Cindy Roman', 1)", "('Debra Grant', 2)", "('Glenn Daugherty', 1)", "('Hailey Ramirez', 1)", "('Jack Waters', 2)", "('James Conway', 2)", "('James Hoog', 4)", "('Jennifer Hernandez', 1)", "('Jeremy Stevens', 2)", "('John Lutz', 1)", "('Jonathan Hansen', 1)", "('Jonathan Warren MD', 1)", "('Joseph Ferguson', 2)", "('Julie Maxwell', 1)", "('Justin Carter', 1)", "('Katherine Burch', 1)", "('Kimberly Smith', 1)", "('Lauson Hen', 2)", "('Matthew Schultz', 2)", "('Mc Lyon', 2)", "('Michael Green', 1)", "('Miss Alexandra Hess', 2)", "('Nail Knite', 2)", "('Nichole Rasmussen', 2)", "('Paul Adam', 1)", "('Pit Alex', 1)", "('Rachel Diaz', 2)", "('Sean Torres', 1)", "('Timothy Hunter', 1)", "('Timothy Ryan', 1)", "('Tonya Whitaker', 2)", "('Warren Lee', 1)"]
The answer is CORRECT.
Number of correct output: 30; Accuracy: 60.0%
 
Index: 32
Question: Identify the month with the highest total sales amount.
Target query: SELECT STRFTIME('%Y-%m', ord_date) AS month, SUM(o.purch_amt) AS total_sales FROM orders o GROUP BY month ORDER BY total_sales DESC LIMIT 1;
Predicted query: SELECT strftime('%m', ord_date) AS month, SUM(purch_amt) AS total_sales  FROM orders  GROUP BY strftime('%m', ord_date)  ORDER BY total_sales DESC  LIMIT 1;
Target output: [('2012-11', 15213.66)]
Predicted output: [('03', 19648.54)]
Sorted and distinct target output: ["('2012-11', 15213.66)"]
Sorted and distinct predicted output: ["('03', 19648.54)"]
The answer is WRONG.
Number of correct output: 30; Accuracy: 60.0%
 
Index: 35
Question: Show cities that have generated total orders over $5000.
Target query: SELECT c.city, SUM(o.purch_amt) FROM orders o JOIN customer c ON o.customer_id = c.customer_id GROUP BY c.city HAVING SUM(o.purch_amt) > 5000;
Predicted query: SELECT c.city FROM customer c JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.city HAVING SUM(o.purch_amt) > 5000;
Target output: [('Berlin', 33825.22), ('London', 33773.340000000004), ('Moscow', 17116.13), ('New York', 26236.679999999997), ('Paris', 29758.68), ('San Jose', 9304.170000000002)]
Predicted output: [('Berlin',), ('London',), ('Moscow',), ('New York',), ('Paris',), ('San Jose',)]
Sorted and distinct target output: ["('Berlin', 33825.22)", "('London', 33773.340000000004)", "('Moscow', 17116.13)", "('New York', 26236.679999999997)", "('Paris', 29758.68)", "('San Jose', 9304.170000000002)"]
Sorted and distinct predicted output: ["('Berlin',)", "('London',)", "('Moscow',)", "('New York',)", "('Paris',)", "('San Jose',)"]
The answer is WRONG.
Number of correct output: 30; Accuracy: 60.0%
 
Index: 37
Question: Identify the salesman with the lowest total sales amount and list all of his customers.
Target query: SELECT s.name, c.cust_name FROM salesman s JOIN customer c ON s.salesman_id = c.salesman_id LEFT JOIN orders o ON s.salesman_id = o.salesman_id GROUP BY s.salesman_id ORDER BY SUM(o.purch_amt) ASC LIMIT 1;
Predicted query: SELECT s.name, c.cust_name FROM salesman s JOIN customer c ON s.salesman_id = c.salesman_id JOIN orders o ON c.customer_id = o.customer_id WHERE s.salesman_id = (     SELECT salesman_id     FROM (         SELECT salesman_id, SUM(purch_amt) AS total_sales         FROM orders         GROUP BY salesman_id         ORDER BY total_sales         LIMIT 1     ) AS subquery );
Target output: [('Nicole Hardy', 'Angela Alvarez')]
Predicted output: [('William Nixon', 'Steven Williams'), ('William Nixon', 'Steven Williams')]
Sorted and distinct target output: ["('Nicole Hardy', 'Angela Alvarez')"]
Sorted and distinct predicted output: ["('William Nixon', 'Steven Williams')"]
The answer is WRONG.
Number of correct output: 30; Accuracy: 60.0%
 
Index: 38
Question: Calculate the difference between the highest and lowest order amounts for each salesman.
Target query: SELECT s.name, MAX(o.purch_amt) - MIN(o.purch_amt) FROM salesman s JOIN orders o ON s.salesman_id = o.salesman_id GROUP BY s.salesman_id;
Predicted query: SELECT salesman_id, (MAX(purch_amt) - MIN(purch_amt)) AS difference FROM orders GROUP BY salesman_id;
Target output: [('James Hoog', 5694.74), ('Nail Knite', 1459.55), ('Lauson Hen', 2369.9), ('Pit Alex', 3720.98), ('Mc Lyon', 2395.9699999999993), ('Paul Adam', 4220.58), ('Joseph Ferguson', 490.24), ('Cindy Roman', 0.0), ('James Conway', 1121.2100000000003), ('John Lutz', 0.0), ('Nichole Rasmussen', 198.26999999999998), ('Debra Grant', 162.8800000000001), ('Michael Green', 0.0), ('Miss Alexandra Hess', 3098.5000000000005), ('Benjamin Cooley', 0.0), ('William Nixon', 0.0), ('Timothy Ryan', 0.0), ('Matthew Schultz', 3800.9), ('Angela Hampton', 0), ('Christine Wood DDS', 1088.7500000000002), ('Tonya Whitaker', 1611.27), ('Rachel Diaz', 588.1800000000003), ('Sean Torres', 0.0), ('Jack Waters', 2377.61), ('Jennifer Hernandez', 0.0), ('Hailey Ramirez', 0.0), ('Katherine Burch', 0.0), ('Justin Carter', 0.0), ('Jonathan Warren MD', 0.0), ('Jonathan Hansen', 0.0), ('Timothy Hunter', 0.0), ('Julie Maxwell', 0.0), ('Glenn Daugherty', 0.0), ('Kimberly Smith', 0.0), ('Warren Lee', 0.0), ('Jeremy Stevens', 2481.32), ('Christina Garza', 0.0), ('Allen Fitzgerald', 0.0)]
Predicted output: [(5001, 5694.74), (5002, 1459.55), (5003, 2369.9), (5005, 3720.98), (5006, 2395.9699999999993), (5007, 4220.58), (5008, 490.24), (5009, 0.0), (5010, 1121.2100000000003), (5011, 0.0), (5013, 198.26999999999998), (5015, 162.8800000000001), (5016, 0.0), (5019, 3098.5000000000005), (5022, 0.0), (5023, 0.0), (5025, 0.0), (5026, 3800.9), (5027, 0), (5029, 1088.7500000000002), (5030, 1611.27), (5031, 588.1800000000003), (5032, 0.0), (5033, 2377.61), (5035, 0.0), (5036, 0.0), (5040, 0.0), (5041, 0.0), (5042, 0.0), (5043, 0.0), (5044, 0.0), (5045, 0.0), (5046, 0.0), (5047, 0.0), (5049, 0.0), (5052, 2481.32), (5054, 0.0), (5057, 0.0)]
Sorted and distinct target output: ["('Allen Fitzgerald', 0.0)", "('Angela Hampton', 0)", "('Benjamin Cooley', 0.0)", "('Christina Garza', 0.0)", "('Christine Wood DDS', 1088.7500000000002)", "('Cindy Roman', 0.0)", "('Debra Grant', 162.8800000000001)", "('Glenn Daugherty', 0.0)", "('Hailey Ramirez', 0.0)", "('Jack Waters', 2377.61)", "('James Conway', 1121.2100000000003)", "('James Hoog', 5694.74)", "('Jennifer Hernandez', 0.0)", "('Jeremy Stevens', 2481.32)", "('John Lutz', 0.0)", "('Jonathan Hansen', 0.0)", "('Jonathan Warren MD', 0.0)", "('Joseph Ferguson', 490.24)", "('Julie Maxwell', 0.0)", "('Justin Carter', 0.0)", "('Katherine Burch', 0.0)", "('Kimberly Smith', 0.0)", "('Lauson Hen', 2369.9)", "('Matthew Schultz', 3800.9)", "('Mc Lyon', 2395.9699999999993)", "('Michael Green', 0.0)", "('Miss Alexandra Hess', 3098.5000000000005)", "('Nail Knite', 1459.55)", "('Nichole Rasmussen', 198.26999999999998)", "('Paul Adam', 4220.58)", "('Pit Alex', 3720.98)", "('Rachel Diaz', 588.1800000000003)", "('Sean Torres', 0.0)", "('Timothy Hunter', 0.0)", "('Timothy Ryan', 0.0)", "('Tonya Whitaker', 1611.27)", "('Warren Lee', 0.0)", "('William Nixon', 0.0)"]
Sorted and distinct predicted output: ['(5001, 5694.74)', '(5002, 1459.55)', '(5003, 2369.9)', '(5005, 3720.98)', '(5006, 2395.9699999999993)', '(5007, 4220.58)', '(5008, 490.24)', '(5009, 0.0)', '(5010, 1121.2100000000003)', '(5011, 0.0)', '(5013, 198.26999999999998)', '(5015, 162.8800000000001)', '(5016, 0.0)', '(5019, 3098.5000000000005)', '(5022, 0.0)', '(5023, 0.0)', '(5025, 0.0)', '(5026, 3800.9)', '(5027, 0)', '(5029, 1088.7500000000002)', '(5030, 1611.27)', '(5031, 588.1800000000003)', '(5032, 0.0)', '(5033, 2377.61)', '(5035, 0.0)', '(5036, 0.0)', '(5040, 0.0)', '(5041, 0.0)', '(5042, 0.0)', '(5043, 0.0)', '(5044, 0.0)', '(5045, 0.0)', '(5046, 0.0)', '(5047, 0.0)', '(5049, 0.0)', '(5052, 2481.32)', '(5054, 0.0)', '(5057, 0.0)']
The answer is WRONG.
Number of correct output: 30; Accuracy: 60.0%
 
Index: 39
Question: List each salesman's name and their largest single sale amount to any customer.
Target query: SELECT s.name, MAX(o.purch_amt) FROM salesman s JOIN orders o ON s.salesman_id = o.salesman_id GROUP BY s.salesman_id;
Predicted query: SELECT s.name, MAX(o.purch_amt)  FROM salesman s  JOIN orders o ON s.salesman_id = o.salesman_id  GROUP BY s.name;
Target output: [('James Hoog', 5760), ('Nail Knite', 1610.05), ('Lauson Hen', 2480.4), ('Pit Alex', 3991.63), ('Mc Lyon', 4379.4), ('Paul Adam', 4295.87), ('Joseph Ferguson', 1663.5), ('Cindy Roman', 3716.87), ('James Conway', 2434.26), ('John Lutz', 948.26), ('Nichole Rasmussen', 2085.39), ('Debra Grant', 2771.11), ('Michael Green', 4970.44), ('Miss Alexandra Hess', 4205.52), ('Benjamin Cooley', 3144.45), ('William Nixon', 469.3), ('Timothy Ryan', 3761.73), ('Matthew Schultz', 4824.13), ('Angela Hampton', 4638), ('Christine Wood DDS', 2984.3), ('Tonya Whitaker', 3824.93), ('Rachel Diaz', 4945.56), ('Sean Torres', 1629.92), ('Jack Waters', 2608.07), ('Jennifer Hernandez', 2741.1), ('Hailey Ramirez', 1160.2), ('Katherine Burch', 612.7), ('Justin Carter', 4532.41), ('Jonathan Warren MD', 1731.25), ('Jonathan Hansen', 4502.37), ('Timothy Hunter', 4713.3), ('Julie Maxwell', 569.21), ('Glenn Daugherty', 3633.23), ('Kimberly Smith', 3989.67), ('Warren Lee', 4785.75), ('Jeremy Stevens', 3257.51), ('Christina Garza', 1204.16), ('Allen Fitzgerald', 3212.12)]
Predicted output: [('Allen Fitzgerald', 3212.12), ('Angela Hampton', 4638), ('Benjamin Cooley', 3144.45), ('Christina Garza', 1204.16), ('Christine Wood DDS', 2984.3), ('Cindy Roman', 3716.87), ('Debra Grant', 2771.11), ('Glenn Daugherty', 3633.23), ('Hailey Ramirez', 1160.2), ('Jack Waters', 2608.07), ('James Conway', 2434.26), ('James Hoog', 5760), ('Jennifer Hernandez', 2741.1), ('Jeremy Stevens', 3257.51), ('John Lutz', 948.26), ('Jonathan Hansen', 4502.37), ('Jonathan Warren MD', 1731.25), ('Joseph Ferguson', 1663.5), ('Julie Maxwell', 569.21), ('Justin Carter', 4532.41), ('Katherine Burch', 612.7), ('Kimberly Smith', 3989.67), ('Lauson Hen', 2480.4), ('Matthew Schultz', 4824.13), ('Mc Lyon', 4379.4), ('Michael Green', 4970.44), ('Miss Alexandra Hess', 4205.52), ('Nail Knite', 1610.05), ('Nichole Rasmussen', 2085.39), ('Paul Adam', 4295.87), ('Pit Alex', 3991.63), ('Rachel Diaz', 4945.56), ('Sean Torres', 1629.92), ('Timothy Hunter', 4713.3), ('Timothy Ryan', 3761.73), ('Tonya Whitaker', 3824.93), ('Warren Lee', 4785.75), ('William Nixon', 469.3)]
Sorted and distinct target output: ["('Allen Fitzgerald', 3212.12)", "('Angela Hampton', 4638)", "('Benjamin Cooley', 3144.45)", "('Christina Garza', 1204.16)", "('Christine Wood DDS', 2984.3)", "('Cindy Roman', 3716.87)", "('Debra Grant', 2771.11)", "('Glenn Daugherty', 3633.23)", "('Hailey Ramirez', 1160.2)", "('Jack Waters', 2608.07)", "('James Conway', 2434.26)", "('James Hoog', 5760)", "('Jennifer Hernandez', 2741.1)", "('Jeremy Stevens', 3257.51)", "('John Lutz', 948.26)", "('Jonathan Hansen', 4502.37)", "('Jonathan Warren MD', 1731.25)", "('Joseph Ferguson', 1663.5)", "('Julie Maxwell', 569.21)", "('Justin Carter', 4532.41)", "('Katherine Burch', 612.7)", "('Kimberly Smith', 3989.67)", "('Lauson Hen', 2480.4)", "('Matthew Schultz', 4824.13)", "('Mc Lyon', 4379.4)", "('Michael Green', 4970.44)", "('Miss Alexandra Hess', 4205.52)", "('Nail Knite', 1610.05)", "('Nichole Rasmussen', 2085.39)", "('Paul Adam', 4295.87)", "('Pit Alex', 3991.63)", "('Rachel Diaz', 4945.56)", "('Sean Torres', 1629.92)", "('Timothy Hunter', 4713.3)", "('Timothy Ryan', 3761.73)", "('Tonya Whitaker', 3824.93)", "('Warren Lee', 4785.75)", "('William Nixon', 469.3)"]
Sorted and distinct predicted output: ["('Allen Fitzgerald', 3212.12)", "('Angela Hampton', 4638)", "('Benjamin Cooley', 3144.45)", "('Christina Garza', 1204.16)", "('Christine Wood DDS', 2984.3)", "('Cindy Roman', 3716.87)", "('Debra Grant', 2771.11)", "('Glenn Daugherty', 3633.23)", "('Hailey Ramirez', 1160.2)", "('Jack Waters', 2608.07)", "('James Conway', 2434.26)", "('James Hoog', 5760)", "('Jennifer Hernandez', 2741.1)", "('Jeremy Stevens', 3257.51)", "('John Lutz', 948.26)", "('Jonathan Hansen', 4502.37)", "('Jonathan Warren MD', 1731.25)", "('Joseph Ferguson', 1663.5)", "('Julie Maxwell', 569.21)", "('Justin Carter', 4532.41)", "('Katherine Burch', 612.7)", "('Kimberly Smith', 3989.67)", "('Lauson Hen', 2480.4)", "('Matthew Schultz', 4824.13)", "('Mc Lyon', 4379.4)", "('Michael Green', 4970.44)", "('Miss Alexandra Hess', 4205.52)", "('Nail Knite', 1610.05)", "('Nichole Rasmussen', 2085.39)", "('Paul Adam', 4295.87)", "('Pit Alex', 3991.63)", "('Rachel Diaz', 4945.56)", "('Sean Torres', 1629.92)", "('Timothy Hunter', 4713.3)", "('Timothy Ryan', 3761.73)", "('Tonya Whitaker', 3824.93)", "('Warren Lee', 4785.75)", "('William Nixon', 469.3)"]
The answer is CORRECT.
Number of correct output: 31; Accuracy: 62.0%
 
Index: 41
Question: Determine the average number of days between orders for each customer.
Target query: SELECT c.cust_name, AVG(julianday(o2.ord_date) - julianday(o1.ord_date)) AS avg_days_between_orders FROM orders o1 JOIN orders o2 ON o1.customer_id = o2.customer_id AND o2.ord_date > o1.ord_date JOIN customer c ON o1.customer_id = c.customer_id GROUP BY o1.customer_id;
Predicted query: SELECT customer_id, AVG(julianday(ord_date) - julianday(LAG(ord_date, 1, NULL) OVER (PARTITION BY customer_id ORDER BY ord_date))) AS avg_days_between_orders FROM orders GROUP BY customer_id;
Target output: [('Nick Rimando', 108.66666666666667), ('Jozy Altidor', 302.6666666666667), ('Fabian Johnson', 242.66666666666666), ('Graham Zusi', 215.0), ('Julian Green', 46.0), ('Geoff Cameron', 121.66666666666667), ('Leslie Jensen', 145.0), ('William Dawson', 244.0), ('Devin Powers', 167.0), ('Jessica Obrien', 154.0), ('Chris Thomas', 226.0), ('Steven Williams', 158.0), ('Jose Mckay', 567.0), ('Sierra Perry', 89.33333333333333), ('Michael Foster', 26.0), ('Hannah Garcia', 9.0)]
Predicted output: Error
Sorted and distinct target output: ["('Chris Thomas', 226.0)", "('Devin Powers', 167.0)", "('Fabian Johnson', 242.66666666666666)", "('Geoff Cameron', 121.66666666666667)", "('Graham Zusi', 215.0)", "('Hannah Garcia', 9.0)", "('Jessica Obrien', 154.0)", "('Jose Mckay', 567.0)", "('Jozy Altidor', 302.6666666666667)", "('Julian Green', 46.0)", "('Leslie Jensen', 145.0)", "('Michael Foster', 26.0)", "('Nick Rimando', 108.66666666666667)", "('Sierra Perry', 89.33333333333333)", "('Steven Williams', 158.0)", "('William Dawson', 244.0)"]
Sorted and distinct predicted output: []
The answer is WRONG.
Number of correct output: 31; Accuracy: 62.0%
 
Index: 43
Question: Identify the salesman who has the most customers with a grade above 200.
Target query: SELECT s.name FROM salesman s JOIN customer c ON s.salesman_id = c.salesman_id WHERE c.grade > 200 GROUP BY s.salesman_id ORDER BY COUNT(c.customer_id) DESC LIMIT 1;
Predicted query: SELECT s.name FROM salesman s JOIN customer c ON s.salesman_id = c.salesman_id WHERE c.grade > 200 GROUP BY s.name ORDER BY COUNT(c.customer_id) DESC LIMIT 1;
Target output: [('Corey Jefferson',)]
Predicted output: [('William Nixon',)]
Sorted and distinct target output: ["('Corey Jefferson',)"]
Sorted and distinct predicted output: ["('William Nixon',)"]
The answer is WRONG.
Number of correct output: 31; Accuracy: 62.0%
 
Index: 44
Question: List all salesmen and their respective customers from New York.
Target query: SELECT s.name AS Salesman_Name, c.cust_name AS Customer_Name FROM salesman s JOIN customer c ON s.salesman_id = c.salesman_id WHERE c.city = 'New York';
Predicted query: SELECT s.name AS salesman_name, c.cust_name AS customer_name FROM salesman s JOIN customer c ON s.salesman_id = c.salesman_id WHERE s.city = 'New York';
Target output: [('James Hoog', 'Nick Rimando'), ('James Hoog', 'Brad Davis'), ('James Conway', 'Amy Allen'), ('Nicole Hardy', 'Angela Alvarez'), ('Jonathan Hansen', 'Karen Hudson'), ('Jonathan Hansen', 'Kathleen Holmes'), ('James Conway', 'Sarah Barrera'), ('Edward Lopez', 'Hannah Garcia')]
Predicted output: [('James Hoog', 'Nick Rimando'), ('James Hoog', 'Brad Davis'), ('Justin Carter', 'Stephen Hurley'), ('Matthew Schultz', 'Christopher Marsh'), ('Drew Skinner', 'Brianna Schmidt'), ('Matthew Schultz', 'Holly Thompson')]
Sorted and distinct target output: ["('Edward Lopez', 'Hannah Garcia')", "('James Conway', 'Amy Allen')", "('James Conway', 'Sarah Barrera')", "('James Hoog', 'Brad Davis')", "('James Hoog', 'Nick Rimando')", "('Jonathan Hansen', 'Karen Hudson')", "('Jonathan Hansen', 'Kathleen Holmes')", "('Nicole Hardy', 'Angela Alvarez')"]
Sorted and distinct predicted output: ["('Drew Skinner', 'Brianna Schmidt')", "('James Hoog', 'Brad Davis')", "('James Hoog', 'Nick Rimando')", "('Justin Carter', 'Stephen Hurley')", "('Matthew Schultz', 'Christopher Marsh')", "('Matthew Schultz', 'Holly Thompson')"]
The answer is WRONG.
Number of correct output: 31; Accuracy: 62.0%
 
Index: 45
Question: How many orders were placed by customers in Paris?
Target query: SELECT COUNT(o.ord_no) AS Total_Orders FROM orders o JOIN customer c ON o.customer_id = c.customer_id WHERE c.city = 'Paris';
Predicted query: SELECT COUNT(*)  FROM orders  JOIN customer ON orders.customer_id = customer.customer_id  JOIN salesman ON orders.salesman_id = salesman.salesman_id  WHERE salesman.city = 'Paris';
Target output: [(11,)]
Predicted output: [(13,)]
Sorted and distinct target output: ['(11,)']
Sorted and distinct predicted output: ['(13,)']
The answer is WRONG.
Number of correct output: 31; Accuracy: 62.0%
 
Index: 46
Question: Identify the salesman with the highest commission in Paris.
Target query: SELECT name, MAX(commission) AS Highest_Commission FROM salesman WHERE city = 'Paris';
Predicted query: SELECT name  FROM salesman  WHERE city = 'Paris'  ORDER BY commission DESC  LIMIT 1;
Target output: [('Jack Waters', 0.15)]
Predicted output: [('Jack Waters',)]
Sorted and distinct target output: ["('Jack Waters', 0.15)"]
Sorted and distinct predicted output: ["('Jack Waters',)"]
The answer is WRONG.
Number of correct output: 31; Accuracy: 62.0%
 
Index: 48
Question: Find all customers served by salesmen from their same city.
Target query: SELECT c.cust_name AS Customer_Name, s.name AS Salesman_Name FROM customer c JOIN salesman s ON c.salesman_id = s.salesman_id WHERE c.city = s.city;
Predicted query: SELECT DISTINCT c.cust_name  FROM customer c  INNER JOIN salesman s ON c.salesman_id = s.salesman_id  WHERE c.city = s.city;
Target output: [('Nick Rimando', 'James Hoog'), ('Brad Davis', 'James Hoog'), ('Fabian Johnson', 'Mc Lyon'), ('Brad Guzan', 'Pit Alex'), ('Dr. Crystal Baker MD', 'Katherine Burch'), ('Donald Wilson', 'Jonathan Warren MD'), ('Christy Quinn', 'Adrienne Moore'), ('Dr. Tracy Pitts', 'Pit Alex'), ('Matthew Johnson', 'Mc Lyon'), ('Sandy Burgess', 'James Conway'), ('Steven Scott', 'Joseph Ferguson'), ('David Perry', 'Cindy Roman')]
Predicted output: [('Nick Rimando',), ('Brad Davis',), ('Fabian Johnson',), ('Brad Guzan',), ('Dr. Crystal Baker MD',), ('Donald Wilson',), ('Christy Quinn',), ('Dr. Tracy Pitts',), ('Matthew Johnson',), ('Sandy Burgess',), ('Steven Scott',), ('David Perry',)]
Sorted and distinct target output: ["('Brad Davis', 'James Hoog')", "('Brad Guzan', 'Pit Alex')", "('Christy Quinn', 'Adrienne Moore')", "('David Perry', 'Cindy Roman')", "('Donald Wilson', 'Jonathan Warren MD')", "('Dr. Crystal Baker MD', 'Katherine Burch')", "('Dr. Tracy Pitts', 'Pit Alex')", "('Fabian Johnson', 'Mc Lyon')", "('Matthew Johnson', 'Mc Lyon')", "('Nick Rimando', 'James Hoog')", "('Sandy Burgess', 'James Conway')", "('Steven Scott', 'Joseph Ferguson')"]
Sorted and distinct predicted output: ["('Brad Davis',)", "('Brad Guzan',)", "('Christy Quinn',)", "('David Perry',)", "('Donald Wilson',)", "('Dr. Crystal Baker MD',)", "('Dr. Tracy Pitts',)", "('Fabian Johnson',)", "('Matthew Johnson',)", "('Nick Rimando',)", "('Sandy Burgess',)", "('Steven Scott',)"]
The answer is WRONG.
Number of correct output: 31; Accuracy: 62.0%
 
Index: 49
Question: What is the average purchase amount of orders handled by each salesman?
Target query: SELECT s.name AS Salesman_Name, AVG(o.purch_amt) AS Average_Purchase_Amount FROM orders o JOIN salesman s ON o.salesman_id = s.salesman_id GROUP BY s.salesman_id;
Predicted query: SELECT salesman.name, AVG(orders.purch_amt)  FROM salesman  JOIN orders ON salesman.salesman_id = orders.salesman_id  GROUP BY salesman.name;
Target output: [('James Hoog', 3004.952), ('Nail Knite', 739.875), ('Lauson Hen', 1467.6966666666667), ('Pit Alex', 2131.14), ('Mc Lyon', 3181.415), ('Paul Adam', 2185.58), ('Joseph Ferguson', 1418.38), ('Cindy Roman', 3716.87), ('James Conway', 1873.6550000000002), ('John Lutz', 948.26), ('Nichole Rasmussen', 1986.2549999999999), ('Debra Grant', 2689.67), ('Michael Green', 4970.44), ('Miss Alexandra Hess', 2656.2700000000004), ('Benjamin Cooley', 3144.45), ('William Nixon', 469.3), ('Timothy Ryan', 3761.73), ('Matthew Schultz', 2923.6800000000003), ('Angela Hampton', 4638.0), ('Christine Wood DDS', 2439.925), ('Tonya Whitaker', 3019.295), ('Rachel Diaz', 4651.47), ('Sean Torres', 1629.92), ('Jack Waters', 1629.846666666667), ('Jennifer Hernandez', 2741.1), ('Hailey Ramirez', 1160.2), ('Katherine Burch', 612.7), ('Justin Carter', 4532.41), ('Jonathan Warren MD', 1731.25), ('Jonathan Hansen', 4502.37), ('Timothy Hunter', 4713.3), ('Julie Maxwell', 569.21), ('Glenn Daugherty', 3633.23), ('Kimberly Smith', 3989.67), ('Warren Lee', 4785.75), ('Jeremy Stevens', 2016.8500000000001), ('Christina Garza', 1204.16), ('Allen Fitzgerald', 3212.12)]
Predicted output: [('Allen Fitzgerald', 3212.12), ('Angela Hampton', 4638.0), ('Benjamin Cooley', 3144.45), ('Christina Garza', 1204.16), ('Christine Wood DDS', 2439.925), ('Cindy Roman', 3716.87), ('Debra Grant', 2689.67), ('Glenn Daugherty', 3633.23), ('Hailey Ramirez', 1160.2), ('Jack Waters', 1629.846666666667), ('James Conway', 1873.6550000000002), ('James Hoog', 3004.952), ('Jennifer Hernandez', 2741.1), ('Jeremy Stevens', 2016.8500000000001), ('John Lutz', 948.26), ('Jonathan Hansen', 4502.37), ('Jonathan Warren MD', 1731.25), ('Joseph Ferguson', 1418.38), ('Julie Maxwell', 569.21), ('Justin Carter', 4532.41), ('Katherine Burch', 612.7), ('Kimberly Smith', 3989.67), ('Lauson Hen', 1467.6966666666667), ('Matthew Schultz', 2923.6800000000003), ('Mc Lyon', 3181.415), ('Michael Green', 4970.44), ('Miss Alexandra Hess', 2656.2700000000004), ('Nail Knite', 739.875), ('Nichole Rasmussen', 1986.2549999999999), ('Paul Adam', 2185.58), ('Pit Alex', 2131.14), ('Rachel Diaz', 4651.47), ('Sean Torres', 1629.92), ('Timothy Hunter', 4713.3), ('Timothy Ryan', 3761.73), ('Tonya Whitaker', 3019.295), ('Warren Lee', 4785.75), ('William Nixon', 469.3)]
Sorted and distinct target output: ["('Allen Fitzgerald', 3212.12)", "('Angela Hampton', 4638.0)", "('Benjamin Cooley', 3144.45)", "('Christina Garza', 1204.16)", "('Christine Wood DDS', 2439.925)", "('Cindy Roman', 3716.87)", "('Debra Grant', 2689.67)", "('Glenn Daugherty', 3633.23)", "('Hailey Ramirez', 1160.2)", "('Jack Waters', 1629.846666666667)", "('James Conway', 1873.6550000000002)", "('James Hoog', 3004.952)", "('Jennifer Hernandez', 2741.1)", "('Jeremy Stevens', 2016.8500000000001)", "('John Lutz', 948.26)", "('Jonathan Hansen', 4502.37)", "('Jonathan Warren MD', 1731.25)", "('Joseph Ferguson', 1418.38)", "('Julie Maxwell', 569.21)", "('Justin Carter', 4532.41)", "('Katherine Burch', 612.7)", "('Kimberly Smith', 3989.67)", "('Lauson Hen', 1467.6966666666667)", "('Matthew Schultz', 2923.6800000000003)", "('Mc Lyon', 3181.415)", "('Michael Green', 4970.44)", "('Miss Alexandra Hess', 2656.2700000000004)", "('Nail Knite', 739.875)", "('Nichole Rasmussen', 1986.2549999999999)", "('Paul Adam', 2185.58)", "('Pit Alex', 2131.14)", "('Rachel Diaz', 4651.47)", "('Sean Torres', 1629.92)", "('Timothy Hunter', 4713.3)", "('Timothy Ryan', 3761.73)", "('Tonya Whitaker', 3019.295)", "('Warren Lee', 4785.75)", "('William Nixon', 469.3)"]
Sorted and distinct predicted output: ["('Allen Fitzgerald', 3212.12)", "('Angela Hampton', 4638.0)", "('Benjamin Cooley', 3144.45)", "('Christina Garza', 1204.16)", "('Christine Wood DDS', 2439.925)", "('Cindy Roman', 3716.87)", "('Debra Grant', 2689.67)", "('Glenn Daugherty', 3633.23)", "('Hailey Ramirez', 1160.2)", "('Jack Waters', 1629.846666666667)", "('James Conway', 1873.6550000000002)", "('James Hoog', 3004.952)", "('Jennifer Hernandez', 2741.1)", "('Jeremy Stevens', 2016.8500000000001)", "('John Lutz', 948.26)", "('Jonathan Hansen', 4502.37)", "('Jonathan Warren MD', 1731.25)", "('Joseph Ferguson', 1418.38)", "('Julie Maxwell', 569.21)", "('Justin Carter', 4532.41)", "('Katherine Burch', 612.7)", "('Kimberly Smith', 3989.67)", "('Lauson Hen', 1467.6966666666667)", "('Matthew Schultz', 2923.6800000000003)", "('Mc Lyon', 3181.415)", "('Michael Green', 4970.44)", "('Miss Alexandra Hess', 2656.2700000000004)", "('Nail Knite', 739.875)", "('Nichole Rasmussen', 1986.2549999999999)", "('Paul Adam', 2185.58)", "('Pit Alex', 2131.14)", "('Rachel Diaz', 4651.47)", "('Sean Torres', 1629.92)", "('Timothy Hunter', 4713.3)", "('Timothy Ryan', 3761.73)", "('Tonya Whitaker', 3019.295)", "('Warren Lee', 4785.75)", "('William Nixon', 469.3)"]
The answer is CORRECT.
Number of correct output: 32; Accuracy: 64.0%
